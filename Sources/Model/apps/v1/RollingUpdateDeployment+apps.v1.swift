//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.28.0
/// apps.v1.RollingUpdateDeployment
///

import Foundation

// MARK: - apps.v1.RollingUpdateDeployment

public extension apps.v1 {

	///
	/// Spec to control the desired behavior of rolling update.
	///
	struct RollingUpdateDeployment: KubernetesResource {
		///
		/// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
		///
		public var maxSurge: IntOrString?
		///
		/// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
		///
		public var maxUnavailable: IntOrString?
		///
		/// Default memberwise initializer
		///
		public init(
			maxSurge: IntOrString? = nil,
			maxUnavailable: IntOrString? = nil
		) {
			self.maxSurge = maxSurge
			self.maxUnavailable = maxUnavailable
		}
	}
}

///
/// Codable conformance
///
public extension apps.v1.RollingUpdateDeployment {

	private enum CodingKeys: String, CodingKey {

		case maxSurge = "maxSurge"
		case maxUnavailable = "maxUnavailable"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.maxSurge = try container.decodeIfPresent(IntOrString.self, forKey: .maxSurge)
		self.maxUnavailable = try container.decodeIfPresent(IntOrString.self, forKey: .maxUnavailable)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(maxSurge, forKey: .maxSurge)
		try encodingContainer.encode(maxUnavailable, forKey: .maxUnavailable)
	}
}
