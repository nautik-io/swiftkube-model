//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.24.10
/// apps.v1.StatefulSetStatus
///

import Foundation

// MARK: - apps.v1.StatefulSetStatus

public extension apps.v1 {

	///
	/// StatefulSetStatus represents the current state of a StatefulSet.
	///
	struct StatefulSetStatus: KubernetesResource {
		///
		/// Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset. This is a beta field and enabled/disabled by StatefulSetMinReadySeconds feature gate.
		///
		public var availableReplicas: Int32?
		///
		/// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
		///
		public var collisionCount: Int32?
		///
		/// Represents the latest available observations of a statefulset's current state.
		///
		public var conditions: [apps.v1.StatefulSetCondition]?
		///
		/// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
		///
		public var currentReplicas: Int32?
		///
		/// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
		///
		public var currentRevision: String?
		///
		/// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
		///
		public var observedGeneration: Int64?
		///
		/// readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
		///
		public var readyReplicas: Int32?
		///
		/// replicas is the number of Pods created by the StatefulSet controller.
		///
		public var replicas: Int32
		///
		/// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
		///
		public var updateRevision: String?
		///
		/// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
		///
		public var updatedReplicas: Int32?
		///
		/// Default memberwise initializer
		///
		public init(
			availableReplicas: Int32? = nil,
			collisionCount: Int32? = nil,
			conditions: [apps.v1.StatefulSetCondition]? = nil,
			currentReplicas: Int32? = nil,
			currentRevision: String? = nil,
			observedGeneration: Int64? = nil,
			readyReplicas: Int32? = nil,
			replicas: Int32,
			updateRevision: String? = nil,
			updatedReplicas: Int32? = nil
		) {
			self.availableReplicas = availableReplicas
			self.collisionCount = collisionCount
			self.conditions = conditions
			self.currentReplicas = currentReplicas
			self.currentRevision = currentRevision
			self.observedGeneration = observedGeneration
			self.readyReplicas = readyReplicas
			self.replicas = replicas
			self.updateRevision = updateRevision
			self.updatedReplicas = updatedReplicas
		}
	}
}

///
/// Codable conformance
///
public extension apps.v1.StatefulSetStatus {

	private enum CodingKeys: String, CodingKey {

		case availableReplicas = "availableReplicas"
		case collisionCount = "collisionCount"
		case conditions = "conditions"
		case currentReplicas = "currentReplicas"
		case currentRevision = "currentRevision"
		case observedGeneration = "observedGeneration"
		case readyReplicas = "readyReplicas"
		case replicas = "replicas"
		case updateRevision = "updateRevision"
		case updatedReplicas = "updatedReplicas"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.availableReplicas = try container.decodeIfPresent(Int32.self, forKey: .availableReplicas)
		self.collisionCount = try container.decodeIfPresent(Int32.self, forKey: .collisionCount)
		self.conditions = try container.decodeIfPresent([apps.v1.StatefulSetCondition].self, forKey: .conditions)
		self.currentReplicas = try container.decodeIfPresent(Int32.self, forKey: .currentReplicas)
		self.currentRevision = try container.decodeIfPresent(String.self, forKey: .currentRevision)
		self.observedGeneration = try container.decodeIfPresent(Int64.self, forKey: .observedGeneration)
		self.readyReplicas = try container.decodeIfPresent(Int32.self, forKey: .readyReplicas)
		self.replicas = try container.decode(Int32.self, forKey: .replicas)
		self.updateRevision = try container.decodeIfPresent(String.self, forKey: .updateRevision)
		self.updatedReplicas = try container.decodeIfPresent(Int32.self, forKey: .updatedReplicas)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(availableReplicas, forKey: .availableReplicas)
		try encodingContainer.encode(collisionCount, forKey: .collisionCount)
		try encodingContainer.encode(conditions, forKey: .conditions)
		try encodingContainer.encode(currentReplicas, forKey: .currentReplicas)
		try encodingContainer.encode(currentRevision, forKey: .currentRevision)
		try encodingContainer.encode(observedGeneration, forKey: .observedGeneration)
		try encodingContainer.encode(readyReplicas, forKey: .readyReplicas)
		try encodingContainer.encode(replicas, forKey: .replicas)
		try encodingContainer.encode(updateRevision, forKey: .updateRevision)
		try encodingContainer.encode(updatedReplicas, forKey: .updatedReplicas)
	}
}
