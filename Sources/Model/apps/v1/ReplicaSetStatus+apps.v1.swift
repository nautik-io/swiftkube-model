//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// apps.v1.ReplicaSetStatus
///

import Foundation

// MARK: - apps.v1.ReplicaSetStatus

public extension apps.v1 {

	///
	/// ReplicaSetStatus represents the current status of a ReplicaSet.
	///
	struct ReplicaSetStatus: KubernetesResource {
		///
		/// The number of available non-terminating pods (ready for at least minReadySeconds) for this replica set.
		///
		public var availableReplicas: Int32?
		///
		/// Represents the latest available observations of a replica set's current state.
		///
		public var conditions: [apps.v1.ReplicaSetCondition]?
		///
		/// The number of non-terminating pods that have labels matching the labels of the pod template of the replicaset.
		///
		public var fullyLabeledReplicas: Int32?
		///
		/// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
		///
		public var observedGeneration: Int64?
		///
		/// The number of non-terminating pods targeted by this ReplicaSet with a Ready Condition.
		///
		public var readyReplicas: Int32?
		///
		/// Replicas is the most recently observed number of non-terminating pods. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset
		///
		public var replicas: Int32
		///
		/// The number of terminating pods for this replica set. Terminating pods have a non-null .metadata.deletionTimestamp and have not yet reached the Failed or Succeeded .status.phase.
		///
		/// This is an alpha field. Enable DeploymentReplicaSetTerminatingReplicas to be able to use this field.
		///
		public var terminatingReplicas: Int32?
		///
		/// Default memberwise initializer
		///
		public init(
			availableReplicas: Int32? = nil,
			conditions: [apps.v1.ReplicaSetCondition]? = nil,
			fullyLabeledReplicas: Int32? = nil,
			observedGeneration: Int64? = nil,
			readyReplicas: Int32? = nil,
			replicas: Int32,
			terminatingReplicas: Int32? = nil
		) {
			self.availableReplicas = availableReplicas
			self.conditions = conditions
			self.fullyLabeledReplicas = fullyLabeledReplicas
			self.observedGeneration = observedGeneration
			self.readyReplicas = readyReplicas
			self.replicas = replicas
			self.terminatingReplicas = terminatingReplicas
		}
	}
}

///
/// Codable conformance
///
public extension apps.v1.ReplicaSetStatus {

	private enum CodingKeys: String, CodingKey {

		case availableReplicas = "availableReplicas"
		case conditions = "conditions"
		case fullyLabeledReplicas = "fullyLabeledReplicas"
		case observedGeneration = "observedGeneration"
		case readyReplicas = "readyReplicas"
		case replicas = "replicas"
		case terminatingReplicas = "terminatingReplicas"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.availableReplicas = try container.decodeIfPresent(Int32.self, forKey: .availableReplicas)
		self.conditions = try container.decodeIfPresent([apps.v1.ReplicaSetCondition].self, forKey: .conditions)
		self.fullyLabeledReplicas = try container.decodeIfPresent(Int32.self, forKey: .fullyLabeledReplicas)
		self.observedGeneration = try container.decodeIfPresent(Int64.self, forKey: .observedGeneration)
		self.readyReplicas = try container.decodeIfPresent(Int32.self, forKey: .readyReplicas)
		self.replicas = try container.decode(Int32.self, forKey: .replicas)
		self.terminatingReplicas = try container.decodeIfPresent(Int32.self, forKey: .terminatingReplicas)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(availableReplicas, forKey: .availableReplicas)
		try encodingContainer.encode(conditions, forKey: .conditions)
		try encodingContainer.encode(fullyLabeledReplicas, forKey: .fullyLabeledReplicas)
		try encodingContainer.encode(observedGeneration, forKey: .observedGeneration)
		try encodingContainer.encode(readyReplicas, forKey: .readyReplicas)
		try encodingContainer.encode(replicas, forKey: .replicas)
		try encodingContainer.encode(terminatingReplicas, forKey: .terminatingReplicas)
	}
}
