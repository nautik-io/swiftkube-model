//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.29.6
/// apps.v1.StatefulSetOrdinals
///

import Foundation

// MARK: - apps.v1.StatefulSetOrdinals

public extension apps.v1 {

	///
	/// StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
	///
	struct StatefulSetOrdinals: KubernetesResource {
		///
		/// start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:
		///   [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).
		/// If unset, defaults to 0. Replica indices will be in the range:
		///   [0, .spec.replicas).
		///
		public var start: Int32?
		///
		/// Default memberwise initializer
		///
		public init(
			start: Int32? = nil
		) {
			self.start = start
		}
	}
}

///
/// Codable conformance
///
public extension apps.v1.StatefulSetOrdinals {

	private enum CodingKeys: String, CodingKey {

		case start = "start"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.start = try container.decodeIfPresent(Int32.self, forKey: .start)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(start, forKey: .start)
	}
}
