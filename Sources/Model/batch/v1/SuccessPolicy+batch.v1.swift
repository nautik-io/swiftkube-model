//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.2
/// batch.v1.SuccessPolicy
///

import Foundation

// MARK: - batch.v1.SuccessPolicy

public extension batch.v1 {

	///
	/// SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.
	///
	struct SuccessPolicy: KubernetesResource {
		///
		/// rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded >= .spec.completions`. Once any of the rules are met, the "SucceededCriteriaMet" condition is added, and the lingering pods are removed. The terminal state for such a Job has the "Complete" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
		///
		public var rules: [batch.v1.SuccessPolicyRule]
		///
		/// Default memberwise initializer
		///
		public init(
			rules: [batch.v1.SuccessPolicyRule]
		) {
			self.rules = rules
		}
	}
}

///
/// Codable conformance
///
public extension batch.v1.SuccessPolicy {

	private enum CodingKeys: String, CodingKey {

		case rules = "rules"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.rules = try container.decode([batch.v1.SuccessPolicyRule].self, forKey: .rules)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(rules, forKey: .rules)
	}
}
