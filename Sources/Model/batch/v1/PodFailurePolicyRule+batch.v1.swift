//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.26.4
/// batch.v1.PodFailurePolicyRule
///

import Foundation

// MARK: - batch.v1.PodFailurePolicyRule

public extension batch.v1 {

	///
	/// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of OnExitCodes and onPodConditions, but not both, can be used in each rule.
	///
	struct PodFailurePolicyRule: KubernetesResource {
		///
		/// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are: - FailJob: indicates that the pod's job is marked as Failed and all
		///   running pods are terminated.
		/// - Ignore: indicates that the counter towards the .backoffLimit is not
		///   incremented and a replacement pod is created.
		/// - Count: indicates that the pod is handled in the default way - the
		///   counter towards the .backoffLimit is incremented.
		/// Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
		///
		///
		///
		public var action: String
		///
		/// Represents the requirement on the container exit codes.
		///
		public var onExitCodes: batch.v1.PodFailurePolicyOnExitCodesRequirement?
		///
		/// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
		///
		public var onPodConditions: [batch.v1.PodFailurePolicyOnPodConditionsPattern]
		///
		/// Default memberwise initializer
		///
		public init(
			action: String,
			onExitCodes: batch.v1.PodFailurePolicyOnExitCodesRequirement? = nil,
			onPodConditions: [batch.v1.PodFailurePolicyOnPodConditionsPattern]
		) {
			self.action = action
			self.onExitCodes = onExitCodes
			self.onPodConditions = onPodConditions
		}
	}
}

///
/// Codable conformance
///
public extension batch.v1.PodFailurePolicyRule {

	private enum CodingKeys: String, CodingKey {

		case action = "action"
		case onExitCodes = "onExitCodes"
		case onPodConditions = "onPodConditions"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.action = try container.decode(String.self, forKey: .action)
		self.onExitCodes = try container.decodeIfPresent(batch.v1.PodFailurePolicyOnExitCodesRequirement.self, forKey: .onExitCodes)
		self.onPodConditions = try container.decode([batch.v1.PodFailurePolicyOnPodConditionsPattern].self, forKey: .onPodConditions)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(action, forKey: .action)
		try encodingContainer.encode(onExitCodes, forKey: .onExitCodes)
		try encodingContainer.encode(onPodConditions, forKey: .onPodConditions)
	}
}
