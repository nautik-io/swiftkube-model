//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.24.8
/// certificates.v1.CertificateSigningRequestCondition
///

import Foundation

// MARK: - certificates.v1.CertificateSigningRequestCondition

public extension certificates.v1 {

	///
	/// CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
	///
	struct CertificateSigningRequestCondition: KubernetesResource {
		///
		/// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
		///
		public var lastTransitionTime: Date?
		///
		/// lastUpdateTime is the time of the last update to this condition
		///
		public var lastUpdateTime: Date?
		///
		/// message contains a human readable message with details about the request state
		///
		public var message: String?
		///
		/// reason indicates a brief reason for the request state
		///
		public var reason: String?
		///
		/// status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
		///
		public var status: String
		///
		/// type of the condition. Known conditions are "Approved", "Denied", and "Failed".
		///
		/// An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
		///
		/// A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
		///
		/// A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
		///
		/// Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
		///
		/// Only one condition of a given type is allowed.
		///
		public var type: String
		///
		/// Default memberwise initializer
		///
		public init(
			lastTransitionTime: Date? = nil,
			lastUpdateTime: Date? = nil,
			message: String? = nil,
			reason: String? = nil,
			status: String,
			type: String
		) {
			self.lastTransitionTime = lastTransitionTime
			self.lastUpdateTime = lastUpdateTime
			self.message = message
			self.reason = reason
			self.status = status
			self.type = type
		}
	}
}

///
/// Codable conformance
///
public extension certificates.v1.CertificateSigningRequestCondition {

	private enum CodingKeys: String, CodingKey {

		case lastTransitionTime = "lastTransitionTime"
		case lastUpdateTime = "lastUpdateTime"
		case message = "message"
		case reason = "reason"
		case status = "status"
		case type = "type"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.lastTransitionTime = try container.decodeIfPresent(Date.self, forKey: .lastTransitionTime)
		self.lastUpdateTime = try container.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
		self.message = try container.decodeIfPresent(String.self, forKey: .message)
		self.reason = try container.decodeIfPresent(String.self, forKey: .reason)
		self.status = try container.decode(String.self, forKey: .status)
		self.type = try container.decode(String.self, forKey: .type)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(lastTransitionTime, forKey: .lastTransitionTime)
		try encodingContainer.encode(lastUpdateTime, forKey: .lastUpdateTime)
		try encodingContainer.encode(message, forKey: .message)
		try encodingContainer.encode(reason, forKey: .reason)
		try encodingContainer.encode(status, forKey: .status)
		try encodingContainer.encode(type, forKey: .type)
	}
}
