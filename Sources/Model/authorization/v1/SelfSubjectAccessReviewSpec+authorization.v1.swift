//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.2
/// authorization.v1.SelfSubjectAccessReviewSpec
///

import Foundation

// MARK: - authorization.v1.SelfSubjectAccessReviewSpec

public extension authorization.v1 {

	///
	/// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
	///
	struct SelfSubjectAccessReviewSpec: KubernetesResource {
		///
		/// NonResourceAttributes describes information for a non-resource access request
		///
		public var nonResourceAttributes: authorization.v1.NonResourceAttributes?
		///
		/// ResourceAuthorizationAttributes describes information for a resource access request
		///
		public var resourceAttributes: authorization.v1.ResourceAttributes?
		///
		/// Default memberwise initializer
		///
		public init(
			nonResourceAttributes: authorization.v1.NonResourceAttributes? = nil,
			resourceAttributes: authorization.v1.ResourceAttributes? = nil
		) {
			self.nonResourceAttributes = nonResourceAttributes
			self.resourceAttributes = resourceAttributes
		}
	}
}

///
/// Codable conformance
///
public extension authorization.v1.SelfSubjectAccessReviewSpec {

	private enum CodingKeys: String, CodingKey {

		case nonResourceAttributes = "nonResourceAttributes"
		case resourceAttributes = "resourceAttributes"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.nonResourceAttributes = try container.decodeIfPresent(authorization.v1.NonResourceAttributes.self, forKey: .nonResourceAttributes)
		self.resourceAttributes = try container.decodeIfPresent(authorization.v1.ResourceAttributes.self, forKey: .resourceAttributes)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(nonResourceAttributes, forKey: .nonResourceAttributes)
		try encodingContainer.encode(resourceAttributes, forKey: .resourceAttributes)
	}
}
