//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.28.0
/// core.v1.ContainerResizePolicy
///

import Foundation

// MARK: - core.v1.ContainerResizePolicy

public extension core.v1 {

	///
	/// ContainerResizePolicy represents resource resize policy for the container.
	///
	struct ContainerResizePolicy: KubernetesResource {
		///
		/// Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
		///
		public var resourceName: String
		///
		/// Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
		///
		public var restartPolicy: String
		///
		/// Default memberwise initializer
		///
		public init(
			resourceName: String,
			restartPolicy: String
		) {
			self.resourceName = resourceName
			self.restartPolicy = restartPolicy
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ContainerResizePolicy {

	private enum CodingKeys: String, CodingKey {

		case resourceName = "resourceName"
		case restartPolicy = "restartPolicy"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.resourceName = try container.decode(String.self, forKey: .resourceName)
		self.restartPolicy = try container.decode(String.self, forKey: .restartPolicy)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(resourceName, forKey: .resourceName)
		try encodingContainer.encode(restartPolicy, forKey: .restartPolicy)
	}
}
