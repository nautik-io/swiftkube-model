//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// core.v1.LifecycleHandler
///

import Foundation

// MARK: - core.v1.LifecycleHandler

public extension core.v1 {

	///
	/// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
	///
	struct LifecycleHandler: KubernetesResource {
		///
		/// Exec specifies a command to execute in the container.
		///
		public var exec: core.v1.ExecAction?
		///
		/// HTTPGet specifies an HTTP GET request to perform.
		///
		public var httpGet: core.v1.HTTPGetAction?
		///
		/// Sleep represents a duration that the container should sleep.
		///
		public var sleep: core.v1.SleepAction?
		///
		/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility. There is no validation of this field and lifecycle hooks will fail at runtime when it is specified.
		///
		public var tcpSocket: core.v1.TCPSocketAction?
		///
		/// Default memberwise initializer
		///
		public init(
			exec: core.v1.ExecAction? = nil,
			httpGet: core.v1.HTTPGetAction? = nil,
			sleep: core.v1.SleepAction? = nil,
			tcpSocket: core.v1.TCPSocketAction? = nil
		) {
			self.exec = exec
			self.httpGet = httpGet
			self.sleep = sleep
			self.tcpSocket = tcpSocket
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.LifecycleHandler {

	private enum CodingKeys: String, CodingKey {

		case exec = "exec"
		case httpGet = "httpGet"
		case sleep = "sleep"
		case tcpSocket = "tcpSocket"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.exec = try container.decodeIfPresent(core.v1.ExecAction.self, forKey: .exec)
		self.httpGet = try container.decodeIfPresent(core.v1.HTTPGetAction.self, forKey: .httpGet)
		self.sleep = try container.decodeIfPresent(core.v1.SleepAction.self, forKey: .sleep)
		self.tcpSocket = try container.decodeIfPresent(core.v1.TCPSocketAction.self, forKey: .tcpSocket)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(exec, forKey: .exec)
		try encodingContainer.encode(httpGet, forKey: .httpGet)
		try encodingContainer.encode(sleep, forKey: .sleep)
		try encodingContainer.encode(tcpSocket, forKey: .tcpSocket)
	}
}
