//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.2
/// core.v1.PreferredSchedulingTerm
///

import Foundation

// MARK: - core.v1.PreferredSchedulingTerm

public extension core.v1 {

	///
	/// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
	///
	struct PreferredSchedulingTerm: KubernetesResource {
		///
		/// A node selector term, associated with the corresponding weight.
		///
		public var preference: core.v1.NodeSelectorTerm
		///
		/// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
		///
		public var weight: Int32
		///
		/// Default memberwise initializer
		///
		public init(
			preference: core.v1.NodeSelectorTerm,
			weight: Int32
		) {
			self.preference = preference
			self.weight = weight
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.PreferredSchedulingTerm {

	private enum CodingKeys: String, CodingKey {

		case preference = "preference"
		case weight = "weight"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.preference = try container.decode(core.v1.NodeSelectorTerm.self, forKey: .preference)
		self.weight = try container.decode(Int32.self, forKey: .weight)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(preference, forKey: .preference)
		try encodingContainer.encode(weight, forKey: .weight)
	}
}
