//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.26.4
/// core.v1.ContainerStateWaiting
///

import Foundation

// MARK: - core.v1.ContainerStateWaiting

public extension core.v1 {

	///
	/// ContainerStateWaiting is a waiting state of a container.
	///
	struct ContainerStateWaiting: KubernetesResource {
		///
		/// Message regarding why the container is not yet running.
		///
		public var message: String?
		///
		/// (brief) reason the container is not yet running.
		///
		public var reason: String?
		///
		/// Default memberwise initializer
		///
		public init(
			message: String? = nil,
			reason: String? = nil
		) {
			self.message = message
			self.reason = reason
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ContainerStateWaiting {

	private enum CodingKeys: String, CodingKey {

		case message = "message"
		case reason = "reason"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.message = try container.decodeIfPresent(String.self, forKey: .message)
		self.reason = try container.decodeIfPresent(String.self, forKey: .reason)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(message, forKey: .message)
		try encodingContainer.encode(reason, forKey: .reason)
	}
}
