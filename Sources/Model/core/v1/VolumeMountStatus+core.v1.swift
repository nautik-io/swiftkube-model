//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.2
/// core.v1.VolumeMountStatus
///

import Foundation

// MARK: - core.v1.VolumeMountStatus

public extension core.v1 {

	///
	/// VolumeMountStatus shows status of volume mounts.
	///
	struct VolumeMountStatus: KubernetesResource {
		///
		/// MountPath corresponds to the original VolumeMount.
		///
		public var mountPath: String
		///
		/// Name corresponds to the name of the original VolumeMount.
		///
		public var name: String
		///
		/// ReadOnly corresponds to the original VolumeMount.
		///
		public var readOnly: Bool?
		///
		/// RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.
		///
		public var recursiveReadOnly: String?
		///
		/// Default memberwise initializer
		///
		public init(
			mountPath: String,
			name: String,
			readOnly: Bool? = nil,
			recursiveReadOnly: String? = nil
		) {
			self.mountPath = mountPath
			self.name = name
			self.readOnly = readOnly
			self.recursiveReadOnly = recursiveReadOnly
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.VolumeMountStatus {

	private enum CodingKeys: String, CodingKey {

		case mountPath = "mountPath"
		case name = "name"
		case readOnly = "readOnly"
		case recursiveReadOnly = "recursiveReadOnly"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.mountPath = try container.decode(String.self, forKey: .mountPath)
		self.name = try container.decode(String.self, forKey: .name)
		self.readOnly = try container.decodeIfPresent(Bool.self, forKey: .readOnly)
		self.recursiveReadOnly = try container.decodeIfPresent(String.self, forKey: .recursiveReadOnly)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(mountPath, forKey: .mountPath)
		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(readOnly, forKey: .readOnly)
		try encodingContainer.encode(recursiveReadOnly, forKey: .recursiveReadOnly)
	}
}
