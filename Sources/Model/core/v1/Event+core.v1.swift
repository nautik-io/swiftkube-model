//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.29.6
/// core.v1.Event
///

import Foundation

// MARK: - core.v1.Event

public extension core.v1 {

	///
	/// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
	///
	struct Event: KubernetesAPIResource, MetadataHavingResource, NamespacedResource,
		ReadableResource, ListableResource, CreatableResource, ReplaceableResource, DeletableResource, CollectionDeletableResource
	{
		///
		/// ListableResource.List associated type
		///
		public typealias List = core.v1.EventList
		///
		/// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
		///
		public let apiVersion: String = "v1"
		///
		/// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		///
		public let kind: String = "Event"
		///
		/// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
		///
		public var metadata: meta.v1.ObjectMeta
		///
		/// What action was taken/failed regarding to the Regarding object.
		///
		public var action: String?
		///
		/// The number of times this event has occurred.
		///
		public var count: Int32?
		///
		/// Time when this Event was first observed.
		///
		public var eventTime: Date?
		///
		/// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
		///
		public var firstTimestamp: Date?
		///
		/// The object that this event is about.
		///
		public var involvedObject: core.v1.ObjectReference
		///
		/// The time at which the most recent occurrence of this event was recorded.
		///
		public var lastTimestamp: Date?
		///
		/// A human-readable description of the status of this operation.
		///
		public var message: String?
		///
		/// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
		///
		public var reason: String?
		///
		/// Optional secondary object for more complex actions.
		///
		public var related: core.v1.ObjectReference?
		///
		/// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
		///
		public var reportingComponent: String?
		///
		/// ID of the controller instance, e.g. `kubelet-xyzf`.
		///
		public var reportingInstance: String?
		///
		/// Data about the Event series this event represents or nil if it's a singleton Event.
		///
		public var series: core.v1.EventSeries?
		///
		/// The component reporting this event. Should be a short machine understandable string.
		///
		public var source: core.v1.EventSource?
		///
		/// Type of this event (Normal, Warning), new types could be added in the future
		///
		public var type: String?
		///
		/// Default memberwise initializer
		///
		public init(
			metadata: meta.v1.ObjectMeta,
			action: String? = nil,
			count: Int32? = nil,
			eventTime: Date? = nil,
			firstTimestamp: Date? = nil,
			involvedObject: core.v1.ObjectReference,
			lastTimestamp: Date? = nil,
			message: String? = nil,
			reason: String? = nil,
			related: core.v1.ObjectReference? = nil,
			reportingComponent: String? = nil,
			reportingInstance: String? = nil,
			series: core.v1.EventSeries? = nil,
			source: core.v1.EventSource? = nil,
			type: String? = nil
		) {
			self.metadata = metadata
			self.action = action
			self.count = count
			self.eventTime = eventTime
			self.firstTimestamp = firstTimestamp
			self.involvedObject = involvedObject
			self.lastTimestamp = lastTimestamp
			self.message = message
			self.reason = reason
			self.related = related
			self.reportingComponent = reportingComponent
			self.reportingInstance = reportingInstance
			self.series = series
			self.source = source
			self.type = type
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.Event {

	private enum CodingKeys: String, CodingKey {

		case apiVersion = "apiVersion"
		case kind = "kind"
		case metadata = "metadata"
		case action = "action"
		case count = "count"
		case eventTime = "eventTime"
		case firstTimestamp = "firstTimestamp"
		case involvedObject = "involvedObject"
		case lastTimestamp = "lastTimestamp"
		case message = "message"
		case reason = "reason"
		case related = "related"
		case reportingComponent = "reportingComponent"
		case reportingInstance = "reportingInstance"
		case series = "series"
		case source = "source"
		case type = "type"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.metadata = try container.decode(meta.v1.ObjectMeta.self, forKey: .metadata)
		self.action = try container.decodeIfPresent(String.self, forKey: .action)
		self.count = try container.decodeIfPresent(Int32.self, forKey: .count)
		self.eventTime = try container.decodeIfPresent(Date.self, forKey: .eventTime)
		self.firstTimestamp = try container.decodeIfPresent(Date.self, forKey: .firstTimestamp)
		self.involvedObject = try container.decode(core.v1.ObjectReference.self, forKey: .involvedObject)
		self.lastTimestamp = try container.decodeIfPresent(Date.self, forKey: .lastTimestamp)
		self.message = try container.decodeIfPresent(String.self, forKey: .message)
		self.reason = try container.decodeIfPresent(String.self, forKey: .reason)
		self.related = try container.decodeIfPresent(core.v1.ObjectReference.self, forKey: .related)
		self.reportingComponent = try container.decodeIfPresent(String.self, forKey: .reportingComponent)
		self.reportingInstance = try container.decodeIfPresent(String.self, forKey: .reportingInstance)
		self.series = try container.decodeIfPresent(core.v1.EventSeries.self, forKey: .series)
		self.source = try container.decodeIfPresent(core.v1.EventSource.self, forKey: .source)
		self.type = try container.decodeIfPresent(String.self, forKey: .type)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(apiVersion, forKey: .apiVersion)
		try encodingContainer.encode(kind, forKey: .kind)
		try encodingContainer.encode(metadata, forKey: .metadata)
		try encodingContainer.encode(action, forKey: .action)
		try encodingContainer.encode(count, forKey: .count)
		try encodingContainer.encode(eventTime, forKey: .eventTime)
		try encodingContainer.encode(firstTimestamp, forKey: .firstTimestamp)
		try encodingContainer.encode(involvedObject, forKey: .involvedObject)
		try encodingContainer.encode(lastTimestamp, forKey: .lastTimestamp)
		try encodingContainer.encode(message, forKey: .message)
		try encodingContainer.encode(reason, forKey: .reason)
		try encodingContainer.encode(related, forKey: .related)
		try encodingContainer.encode(reportingComponent, forKey: .reportingComponent)
		try encodingContainer.encode(reportingInstance, forKey: .reportingInstance)
		try encodingContainer.encode(series, forKey: .series)
		try encodingContainer.encode(source, forKey: .source)
		try encodingContainer.encode(type, forKey: .type)
	}
}
