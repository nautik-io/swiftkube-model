//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.28.0
/// core.v1.ReplicationControllerStatus
///

import Foundation

// MARK: - core.v1.ReplicationControllerStatus

public extension core.v1 {

	///
	/// ReplicationControllerStatus represents the current status of a replication controller.
	///
	struct ReplicationControllerStatus: KubernetesResource {
		///
		/// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
		///
		public var availableReplicas: Int32?
		///
		/// Represents the latest available observations of a replication controller's current state.
		///
		public var conditions: [core.v1.ReplicationControllerCondition]?
		///
		/// The number of pods that have labels matching the labels of the pod template of the replication controller.
		///
		public var fullyLabeledReplicas: Int32?
		///
		/// ObservedGeneration reflects the generation of the most recently observed replication controller.
		///
		public var observedGeneration: Int64?
		///
		/// The number of ready replicas for this replication controller.
		///
		public var readyReplicas: Int32?
		///
		/// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
		///
		public var replicas: Int32
		///
		/// Default memberwise initializer
		///
		public init(
			availableReplicas: Int32? = nil,
			conditions: [core.v1.ReplicationControllerCondition]? = nil,
			fullyLabeledReplicas: Int32? = nil,
			observedGeneration: Int64? = nil,
			readyReplicas: Int32? = nil,
			replicas: Int32
		) {
			self.availableReplicas = availableReplicas
			self.conditions = conditions
			self.fullyLabeledReplicas = fullyLabeledReplicas
			self.observedGeneration = observedGeneration
			self.readyReplicas = readyReplicas
			self.replicas = replicas
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ReplicationControllerStatus {

	private enum CodingKeys: String, CodingKey {

		case availableReplicas = "availableReplicas"
		case conditions = "conditions"
		case fullyLabeledReplicas = "fullyLabeledReplicas"
		case observedGeneration = "observedGeneration"
		case readyReplicas = "readyReplicas"
		case replicas = "replicas"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.availableReplicas = try container.decodeIfPresent(Int32.self, forKey: .availableReplicas)
		self.conditions = try container.decodeIfPresent([core.v1.ReplicationControllerCondition].self, forKey: .conditions)
		self.fullyLabeledReplicas = try container.decodeIfPresent(Int32.self, forKey: .fullyLabeledReplicas)
		self.observedGeneration = try container.decodeIfPresent(Int64.self, forKey: .observedGeneration)
		self.readyReplicas = try container.decodeIfPresent(Int32.self, forKey: .readyReplicas)
		self.replicas = try container.decode(Int32.self, forKey: .replicas)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(availableReplicas, forKey: .availableReplicas)
		try encodingContainer.encode(conditions, forKey: .conditions)
		try encodingContainer.encode(fullyLabeledReplicas, forKey: .fullyLabeledReplicas)
		try encodingContainer.encode(observedGeneration, forKey: .observedGeneration)
		try encodingContainer.encode(readyReplicas, forKey: .readyReplicas)
		try encodingContainer.encode(replicas, forKey: .replicas)
	}
}
