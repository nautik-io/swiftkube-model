//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// core.v1.VolumeMount
///

import Foundation

// MARK: - core.v1.VolumeMount

public extension core.v1 {

	///
	/// VolumeMount describes a mounting of a Volume within a container.
	///
	struct VolumeMount: KubernetesResource {
		///
		/// Path within the container at which the volume should be mounted.  Must not contain ':'.
		///
		public var mountPath: String
		///
		/// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
		///
		public var mountPropagation: String?
		///
		/// This must match the Name of a Volume.
		///
		public var name: String
		///
		/// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
		///
		public var readOnly: Bool?
		///
		/// RecursiveReadOnly specifies whether read-only mounts should be handled recursively.
		///
		/// If ReadOnly is false, this field has no meaning and must be unspecified.
		///
		/// If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.
		///
		/// If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).
		///
		/// If this field is not specified, it is treated as an equivalent of Disabled.
		///
		public var recursiveReadOnly: String?
		///
		/// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
		///
		public var subPath: String?
		///
		/// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
		///
		public var subPathExpr: String?
		///
		/// Default memberwise initializer
		///
		public init(
			mountPath: String,
			mountPropagation: String? = nil,
			name: String,
			readOnly: Bool? = nil,
			recursiveReadOnly: String? = nil,
			subPath: String? = nil,
			subPathExpr: String? = nil
		) {
			self.mountPath = mountPath
			self.mountPropagation = mountPropagation
			self.name = name
			self.readOnly = readOnly
			self.recursiveReadOnly = recursiveReadOnly
			self.subPath = subPath
			self.subPathExpr = subPathExpr
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.VolumeMount {

	private enum CodingKeys: String, CodingKey {

		case mountPath = "mountPath"
		case mountPropagation = "mountPropagation"
		case name = "name"
		case readOnly = "readOnly"
		case recursiveReadOnly = "recursiveReadOnly"
		case subPath = "subPath"
		case subPathExpr = "subPathExpr"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.mountPath = try container.decode(String.self, forKey: .mountPath)
		self.mountPropagation = try container.decodeIfPresent(String.self, forKey: .mountPropagation)
		self.name = try container.decode(String.self, forKey: .name)
		self.readOnly = try container.decodeIfPresent(Bool.self, forKey: .readOnly)
		self.recursiveReadOnly = try container.decodeIfPresent(String.self, forKey: .recursiveReadOnly)
		self.subPath = try container.decodeIfPresent(String.self, forKey: .subPath)
		self.subPathExpr = try container.decodeIfPresent(String.self, forKey: .subPathExpr)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(mountPath, forKey: .mountPath)
		try encodingContainer.encode(mountPropagation, forKey: .mountPropagation)
		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(readOnly, forKey: .readOnly)
		try encodingContainer.encode(recursiveReadOnly, forKey: .recursiveReadOnly)
		try encodingContainer.encode(subPath, forKey: .subPath)
		try encodingContainer.encode(subPathExpr, forKey: .subPathExpr)
	}
}
