//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.29.6
/// core.v1.VolumeMount
///

import Foundation

// MARK: - core.v1.VolumeMount

public extension core.v1 {

	///
	/// VolumeMount describes a mounting of a Volume within a container.
	///
	struct VolumeMount: KubernetesResource {
		///
		/// Path within the container at which the volume should be mounted.  Must not contain ':'.
		///
		public var mountPath: String
		///
		/// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
		///
		public var mountPropagation: String?
		///
		/// This must match the Name of a Volume.
		///
		public var name: String
		///
		/// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
		///
		public var readOnly: Bool?
		///
		/// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
		///
		public var subPath: String?
		///
		/// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
		///
		public var subPathExpr: String?
		///
		/// Default memberwise initializer
		///
		public init(
			mountPath: String,
			mountPropagation: String? = nil,
			name: String,
			readOnly: Bool? = nil,
			subPath: String? = nil,
			subPathExpr: String? = nil
		) {
			self.mountPath = mountPath
			self.mountPropagation = mountPropagation
			self.name = name
			self.readOnly = readOnly
			self.subPath = subPath
			self.subPathExpr = subPathExpr
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.VolumeMount {

	private enum CodingKeys: String, CodingKey {

		case mountPath = "mountPath"
		case mountPropagation = "mountPropagation"
		case name = "name"
		case readOnly = "readOnly"
		case subPath = "subPath"
		case subPathExpr = "subPathExpr"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.mountPath = try container.decode(String.self, forKey: .mountPath)
		self.mountPropagation = try container.decodeIfPresent(String.self, forKey: .mountPropagation)
		self.name = try container.decode(String.self, forKey: .name)
		self.readOnly = try container.decodeIfPresent(Bool.self, forKey: .readOnly)
		self.subPath = try container.decodeIfPresent(String.self, forKey: .subPath)
		self.subPathExpr = try container.decodeIfPresent(String.self, forKey: .subPathExpr)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(mountPath, forKey: .mountPath)
		try encodingContainer.encode(mountPropagation, forKey: .mountPropagation)
		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(readOnly, forKey: .readOnly)
		try encodingContainer.encode(subPath, forKey: .subPath)
		try encodingContainer.encode(subPathExpr, forKey: .subPathExpr)
	}
}
