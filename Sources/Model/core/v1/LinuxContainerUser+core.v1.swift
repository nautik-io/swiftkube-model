//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// core.v1.LinuxContainerUser
///

import Foundation

// MARK: - core.v1.LinuxContainerUser

public extension core.v1 {

	///
	/// LinuxContainerUser represents user identity information in Linux containers
	///
	struct LinuxContainerUser: KubernetesResource {
		///
		/// GID is the primary gid initially attached to the first process in the container
		///
		public var gid: Int64
		///
		/// SupplementalGroups are the supplemental groups initially attached to the first process in the container
		///
		public var supplementalGroups: [Int64]?
		///
		/// UID is the primary uid initially attached to the first process in the container
		///
		public var uid: Int64
		///
		/// Default memberwise initializer
		///
		public init(
			gid: Int64,
			supplementalGroups: [Int64]? = nil,
			uid: Int64
		) {
			self.gid = gid
			self.supplementalGroups = supplementalGroups
			self.uid = uid
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.LinuxContainerUser {

	private enum CodingKeys: String, CodingKey {

		case gid = "gid"
		case supplementalGroups = "supplementalGroups"
		case uid = "uid"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.gid = try container.decode(Int64.self, forKey: .gid)
		self.supplementalGroups = try container.decodeIfPresent([Int64].self, forKey: .supplementalGroups)
		self.uid = try container.decode(Int64.self, forKey: .uid)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(gid, forKey: .gid)
		try encodingContainer.encode(supplementalGroups, forKey: .supplementalGroups)
		try encodingContainer.encode(uid, forKey: .uid)
	}
}
