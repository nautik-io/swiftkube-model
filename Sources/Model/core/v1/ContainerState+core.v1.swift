//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// core.v1.ContainerState
///

import Foundation

// MARK: - core.v1.ContainerState

public extension core.v1 {

	///
	/// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
	///
	struct ContainerState: KubernetesResource {
		///
		/// Details about a running container
		///
		public var running: core.v1.ContainerStateRunning?
		///
		/// Details about a terminated container
		///
		public var terminated: core.v1.ContainerStateTerminated?
		///
		/// Details about a waiting container
		///
		public var waiting: core.v1.ContainerStateWaiting?
		///
		/// Default memberwise initializer
		///
		public init(
			running: core.v1.ContainerStateRunning? = nil,
			terminated: core.v1.ContainerStateTerminated? = nil,
			waiting: core.v1.ContainerStateWaiting? = nil
		) {
			self.running = running
			self.terminated = terminated
			self.waiting = waiting
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ContainerState {

	private enum CodingKeys: String, CodingKey {

		case running = "running"
		case terminated = "terminated"
		case waiting = "waiting"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.running = try container.decodeIfPresent(core.v1.ContainerStateRunning.self, forKey: .running)
		self.terminated = try container.decodeIfPresent(core.v1.ContainerStateTerminated.self, forKey: .terminated)
		self.waiting = try container.decodeIfPresent(core.v1.ContainerStateWaiting.self, forKey: .waiting)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(running, forKey: .running)
		try encodingContainer.encode(terminated, forKey: .terminated)
		try encodingContainer.encode(waiting, forKey: .waiting)
	}
}
