//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// core.v1.Lifecycle
///

import Foundation

// MARK: - core.v1.Lifecycle

public extension core.v1 {

	///
	/// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
	///
	struct Lifecycle: KubernetesResource {
		///
		/// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
		///
		public var postStart: core.v1.LifecycleHandler?
		///
		/// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
		///
		public var preStop: core.v1.LifecycleHandler?
		///
		/// Default memberwise initializer
		///
		public init(
			postStart: core.v1.LifecycleHandler? = nil,
			preStop: core.v1.LifecycleHandler? = nil
		) {
			self.postStart = postStart
			self.preStop = preStop
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.Lifecycle {

	private enum CodingKeys: String, CodingKey {

		case postStart = "postStart"
		case preStop = "preStop"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.postStart = try container.decodeIfPresent(core.v1.LifecycleHandler.self, forKey: .postStart)
		self.preStop = try container.decodeIfPresent(core.v1.LifecycleHandler.self, forKey: .preStop)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(postStart, forKey: .postStart)
		try encodingContainer.encode(preStop, forKey: .preStop)
	}
}
