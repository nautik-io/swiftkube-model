//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// core.v1.ClusterTrustBundleProjection
///

import Foundation

// MARK: - core.v1.ClusterTrustBundleProjection

public extension core.v1 {

	///
	/// ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
	///
	struct ClusterTrustBundleProjection: KubernetesResource {
		///
		/// Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is set.  Mutually-exclusive with name.  If unset, interpreted as "match nothing".  If set but empty, interpreted as "match everything".
		///
		public var labelSelector: meta.v1.LabelSelector?
		///
		/// Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
		///
		public var name: String?
		///
		/// If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
		///
		public var optional: Bool?
		///
		/// Relative path from the volume root to write the bundle.
		///
		public var path: String
		///
		/// Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
		///
		public var signerName: String?
		///
		/// Default memberwise initializer
		///
		public init(
			labelSelector: meta.v1.LabelSelector? = nil,
			name: String? = nil,
			optional: Bool? = nil,
			path: String,
			signerName: String? = nil
		) {
			self.labelSelector = labelSelector
			self.name = name
			self.optional = optional
			self.path = path
			self.signerName = signerName
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ClusterTrustBundleProjection {

	private enum CodingKeys: String, CodingKey {

		case labelSelector = "labelSelector"
		case name = "name"
		case optional = "optional"
		case path = "path"
		case signerName = "signerName"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.labelSelector = try container.decodeIfPresent(meta.v1.LabelSelector.self, forKey: .labelSelector)
		self.name = try container.decodeIfPresent(String.self, forKey: .name)
		self.optional = try container.decodeIfPresent(Bool.self, forKey: .optional)
		self.path = try container.decode(String.self, forKey: .path)
		self.signerName = try container.decodeIfPresent(String.self, forKey: .signerName)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(labelSelector, forKey: .labelSelector)
		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(optional, forKey: .optional)
		try encodingContainer.encode(path, forKey: .path)
		try encodingContainer.encode(signerName, forKey: .signerName)
	}
}
