//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.24.10
/// core.v1.PersistentVolumeClaimStatus
///

import Foundation

// MARK: - core.v1.PersistentVolumeClaimStatus

public extension core.v1 {

	///
	/// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
	///
	struct PersistentVolumeClaimStatus: KubernetesResource {
		///
		/// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
		///
		public var accessModes: [String]?
		///
		/// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
		///
		public var allocatedResources: [String: Quantity]?
		///
		/// capacity represents the actual resources of the underlying volume.
		///
		public var capacity: [String: Quantity]?
		///
		/// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
		///
		public var conditions: [core.v1.PersistentVolumeClaimCondition]?
		///
		/// phase represents the current phase of PersistentVolumeClaim.
		///
		///
		///
		public var phase: String?
		///
		/// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
		///
		public var resizeStatus: String?
		///
		/// Default memberwise initializer
		///
		public init(
			accessModes: [String]? = nil,
			allocatedResources: [String: Quantity]? = nil,
			capacity: [String: Quantity]? = nil,
			conditions: [core.v1.PersistentVolumeClaimCondition]? = nil,
			phase: String? = nil,
			resizeStatus: String? = nil
		) {
			self.accessModes = accessModes
			self.allocatedResources = allocatedResources
			self.capacity = capacity
			self.conditions = conditions
			self.phase = phase
			self.resizeStatus = resizeStatus
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.PersistentVolumeClaimStatus {

	private enum CodingKeys: String, CodingKey {

		case accessModes = "accessModes"
		case allocatedResources = "allocatedResources"
		case capacity = "capacity"
		case conditions = "conditions"
		case phase = "phase"
		case resizeStatus = "resizeStatus"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.accessModes = try container.decodeIfPresent([String].self, forKey: .accessModes)
		self.allocatedResources = try container.decodeIfPresent([String: Quantity].self, forKey: .allocatedResources)
		self.capacity = try container.decodeIfPresent([String: Quantity].self, forKey: .capacity)
		self.conditions = try container.decodeIfPresent([core.v1.PersistentVolumeClaimCondition].self, forKey: .conditions)
		self.phase = try container.decodeIfPresent(String.self, forKey: .phase)
		self.resizeStatus = try container.decodeIfPresent(String.self, forKey: .resizeStatus)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(accessModes, forKey: .accessModes)
		try encodingContainer.encode(allocatedResources, forKey: .allocatedResources)
		try encodingContainer.encode(capacity, forKey: .capacity)
		try encodingContainer.encode(conditions, forKey: .conditions)
		try encodingContainer.encode(phase, forKey: .phase)
		try encodingContainer.encode(resizeStatus, forKey: .resizeStatus)
	}
}
