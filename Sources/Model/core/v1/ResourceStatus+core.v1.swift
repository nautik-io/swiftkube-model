//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// core.v1.ResourceStatus
///

import Foundation

// MARK: - core.v1.ResourceStatus

public extension core.v1 {

	///
	/// ResourceStatus represents the status of a single resource allocated to a Pod.
	///
	struct ResourceStatus: KubernetesResource {
		///
		/// Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be "claim:<claim_name>/<request>". When this status is reported about a container, the "claim_name" and "request" must match one of the claims of this container.
		///
		public var name: String
		///
		/// List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
		///
		public var resources: [core.v1.ResourceHealth]?
		///
		/// Default memberwise initializer
		///
		public init(
			name: String,
			resources: [core.v1.ResourceHealth]? = nil
		) {
			self.name = name
			self.resources = resources
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ResourceStatus {

	private enum CodingKeys: String, CodingKey {

		case name = "name"
		case resources = "resources"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.name = try container.decode(String.self, forKey: .name)
		self.resources = try container.decodeIfPresent([core.v1.ResourceHealth].self, forKey: .resources)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(resources, forKey: .resources)
	}
}
