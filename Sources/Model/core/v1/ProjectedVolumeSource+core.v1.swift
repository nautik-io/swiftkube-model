//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.26.4
/// core.v1.ProjectedVolumeSource
///

import Foundation

// MARK: - core.v1.ProjectedVolumeSource

public extension core.v1 {

	///
	/// Represents a projected volume source
	///
	struct ProjectedVolumeSource: KubernetesResource {
		///
		/// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
		///
		public var defaultMode: Int32?
		///
		/// sources is the list of volume projections
		///
		public var sources: [core.v1.VolumeProjection]?
		///
		/// Default memberwise initializer
		///
		public init(
			defaultMode: Int32? = nil,
			sources: [core.v1.VolumeProjection]? = nil
		) {
			self.defaultMode = defaultMode
			self.sources = sources
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ProjectedVolumeSource {

	private enum CodingKeys: String, CodingKey {

		case defaultMode = "defaultMode"
		case sources = "sources"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.defaultMode = try container.decodeIfPresent(Int32.self, forKey: .defaultMode)
		self.sources = try container.decodeIfPresent([core.v1.VolumeProjection].self, forKey: .sources)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(defaultMode, forKey: .defaultMode)
		try encodingContainer.encode(sources, forKey: .sources)
	}
}
