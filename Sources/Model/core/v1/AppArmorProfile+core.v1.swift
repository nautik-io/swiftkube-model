//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// core.v1.AppArmorProfile
///

import Foundation

// MARK: - core.v1.AppArmorProfile

public extension core.v1 {

	///
	/// AppArmorProfile defines a pod or container's AppArmor settings.
	///
	struct AppArmorProfile: KubernetesResource {
		///
		/// localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
		///
		public var localhostProfile: String?
		///
		/// type indicates which kind of AppArmor profile will be applied. Valid options are:
		///   Localhost - a profile pre-loaded on the node.
		///   RuntimeDefault - the container runtime's default profile.
		///   Unconfined - no AppArmor enforcement.
		///
		public var type: String
		///
		/// Default memberwise initializer
		///
		public init(
			localhostProfile: String? = nil,
			type: String
		) {
			self.localhostProfile = localhostProfile
			self.type = type
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.AppArmorProfile {

	private enum CodingKeys: String, CodingKey {

		case localhostProfile = "localhostProfile"
		case type = "type"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.localhostProfile = try container.decodeIfPresent(String.self, forKey: .localhostProfile)
		self.type = try container.decode(String.self, forKey: .type)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(localhostProfile, forKey: .localhostProfile)
		try encodingContainer.encode(type, forKey: .type)
	}
}
