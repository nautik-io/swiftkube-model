//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// core.v1.ResourceHealth
///

import Foundation

// MARK: - core.v1.ResourceHealth

public extension core.v1 {

	///
	/// ResourceHealth represents the health of a resource. It has the latest device health information. This is a part of KEP https://kep.k8s.io/4680.
	///
	struct ResourceHealth: KubernetesResource {
		///
		/// Health of the resource. can be one of:
		///  - Healthy: operates as normal
		///  - Unhealthy: reported unhealthy. We consider this a temporary health issue
		///               since we do not have a mechanism today to distinguish
		///               temporary and permanent issues.
		///  - Unknown: The status cannot be determined.
		///             For example, Device Plugin got unregistered and hasn't been re-registered since.
		///
		/// In future we may want to introduce the PermanentlyUnhealthy Status.
		///
		public var health: String?
		///
		/// ResourceID is the unique identifier of the resource. See the ResourceID type for more information.
		///
		public var resourceID: String
		///
		/// Default memberwise initializer
		///
		public init(
			health: String? = nil,
			resourceID: String
		) {
			self.health = health
			self.resourceID = resourceID
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ResourceHealth {

	private enum CodingKeys: String, CodingKey {

		case health = "health"
		case resourceID = "resourceID"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.health = try container.decodeIfPresent(String.self, forKey: .health)
		self.resourceID = try container.decode(String.self, forKey: .resourceID)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(health, forKey: .health)
		try encodingContainer.encode(resourceID, forKey: .resourceID)
	}
}
