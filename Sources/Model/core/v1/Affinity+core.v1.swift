//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.28.0
/// core.v1.Affinity
///

import Foundation

// MARK: - core.v1.Affinity

public extension core.v1 {

	///
	/// Affinity is a group of affinity scheduling rules.
	///
	struct Affinity: KubernetesResource {
		///
		/// Describes node affinity scheduling rules for the pod.
		///
		public var nodeAffinity: core.v1.NodeAffinity?
		///
		/// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
		///
		public var podAffinity: core.v1.PodAffinity?
		///
		/// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
		///
		public var podAntiAffinity: core.v1.PodAntiAffinity?
		///
		/// Default memberwise initializer
		///
		public init(
			nodeAffinity: core.v1.NodeAffinity? = nil,
			podAffinity: core.v1.PodAffinity? = nil,
			podAntiAffinity: core.v1.PodAntiAffinity? = nil
		) {
			self.nodeAffinity = nodeAffinity
			self.podAffinity = podAffinity
			self.podAntiAffinity = podAntiAffinity
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.Affinity {

	private enum CodingKeys: String, CodingKey {

		case nodeAffinity = "nodeAffinity"
		case podAffinity = "podAffinity"
		case podAntiAffinity = "podAntiAffinity"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.nodeAffinity = try container.decodeIfPresent(core.v1.NodeAffinity.self, forKey: .nodeAffinity)
		self.podAffinity = try container.decodeIfPresent(core.v1.PodAffinity.self, forKey: .podAffinity)
		self.podAntiAffinity = try container.decodeIfPresent(core.v1.PodAntiAffinity.self, forKey: .podAntiAffinity)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(nodeAffinity, forKey: .nodeAffinity)
		try encodingContainer.encode(podAffinity, forKey: .podAffinity)
		try encodingContainer.encode(podAntiAffinity, forKey: .podAntiAffinity)
	}
}
