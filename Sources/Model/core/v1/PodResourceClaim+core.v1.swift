//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// core.v1.PodResourceClaim
///

import Foundation

// MARK: - core.v1.PodResourceClaim

public extension core.v1 {

	///
	/// PodResourceClaim references exactly one ResourceClaim, either directly or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim for the pod.
	///
	/// It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
	///
	struct PodResourceClaim: KubernetesResource {
		///
		/// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
		///
		public var name: String
		///
		/// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
		///
		/// Exactly one of ResourceClaimName and ResourceClaimTemplateName must be set.
		///
		public var resourceClaimName: String?
		///
		/// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
		///
		/// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
		///
		/// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
		///
		/// Exactly one of ResourceClaimName and ResourceClaimTemplateName must be set.
		///
		public var resourceClaimTemplateName: String?
		///
		/// Default memberwise initializer
		///
		public init(
			name: String,
			resourceClaimName: String? = nil,
			resourceClaimTemplateName: String? = nil
		) {
			self.name = name
			self.resourceClaimName = resourceClaimName
			self.resourceClaimTemplateName = resourceClaimTemplateName
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.PodResourceClaim {

	private enum CodingKeys: String, CodingKey {

		case name = "name"
		case resourceClaimName = "resourceClaimName"
		case resourceClaimTemplateName = "resourceClaimTemplateName"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.name = try container.decode(String.self, forKey: .name)
		self.resourceClaimName = try container.decodeIfPresent(String.self, forKey: .resourceClaimName)
		self.resourceClaimTemplateName = try container.decodeIfPresent(String.self, forKey: .resourceClaimTemplateName)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(resourceClaimName, forKey: .resourceClaimName)
		try encodingContainer.encode(resourceClaimTemplateName, forKey: .resourceClaimTemplateName)
	}
}
