//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.2
/// core.v1.NodeRuntimeHandlerFeatures
///

import Foundation

// MARK: - core.v1.NodeRuntimeHandlerFeatures

public extension core.v1 {

	///
	/// NodeRuntimeHandlerFeatures is a set of features implemented by the runtime handler.
	///
	struct NodeRuntimeHandlerFeatures: KubernetesResource {
		///
		/// RecursiveReadOnlyMounts is set to true if the runtime handler supports RecursiveReadOnlyMounts.
		///
		public var recursiveReadOnlyMounts: Bool?
		///
		/// UserNamespaces is set to true if the runtime handler supports UserNamespaces, including for volumes.
		///
		public var userNamespaces: Bool?
		///
		/// Default memberwise initializer
		///
		public init(
			recursiveReadOnlyMounts: Bool? = nil,
			userNamespaces: Bool? = nil
		) {
			self.recursiveReadOnlyMounts = recursiveReadOnlyMounts
			self.userNamespaces = userNamespaces
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.NodeRuntimeHandlerFeatures {

	private enum CodingKeys: String, CodingKey {

		case recursiveReadOnlyMounts = "recursiveReadOnlyMounts"
		case userNamespaces = "userNamespaces"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.recursiveReadOnlyMounts = try container.decodeIfPresent(Bool.self, forKey: .recursiveReadOnlyMounts)
		self.userNamespaces = try container.decodeIfPresent(Bool.self, forKey: .userNamespaces)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(recursiveReadOnlyMounts, forKey: .recursiveReadOnlyMounts)
		try encodingContainer.encode(userNamespaces, forKey: .userNamespaces)
	}
}
