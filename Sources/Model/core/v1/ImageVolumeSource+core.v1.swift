//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// core.v1.ImageVolumeSource
///

import Foundation

// MARK: - core.v1.ImageVolumeSource

public extension core.v1 {

	///
	/// ImageVolumeSource represents a image volume resource.
	///
	struct ImageVolumeSource: KubernetesResource {
		///
		/// Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
		///
		public var pullPolicy: String?
		///
		/// Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
		///
		public var reference: String?
		///
		/// Default memberwise initializer
		///
		public init(
			pullPolicy: String? = nil,
			reference: String? = nil
		) {
			self.pullPolicy = pullPolicy
			self.reference = reference
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ImageVolumeSource {

	private enum CodingKeys: String, CodingKey {

		case pullPolicy = "pullPolicy"
		case reference = "reference"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.pullPolicy = try container.decodeIfPresent(String.self, forKey: .pullPolicy)
		self.reference = try container.decodeIfPresent(String.self, forKey: .reference)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(pullPolicy, forKey: .pullPolicy)
		try encodingContainer.encode(reference, forKey: .reference)
	}
}
