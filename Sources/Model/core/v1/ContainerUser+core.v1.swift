//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// core.v1.ContainerUser
///

import Foundation

// MARK: - core.v1.ContainerUser

public extension core.v1 {

	///
	/// ContainerUser represents user identity information
	///
	struct ContainerUser: KubernetesResource {
		///
		/// Linux holds user identity information initially attached to the first process of the containers in Linux. Note that the actual running identity can be changed if the process has enough privilege to do so.
		///
		public var linux: core.v1.LinuxContainerUser?
		///
		/// Default memberwise initializer
		///
		public init(
			linux: core.v1.LinuxContainerUser? = nil
		) {
			self.linux = linux
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.ContainerUser {

	private enum CodingKeys: String, CodingKey {

		case linux = "linux"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.linux = try container.decodeIfPresent(core.v1.LinuxContainerUser.self, forKey: .linux)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(linux, forKey: .linux)
	}
}
