//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// core.v1.GRPCAction
///

import Foundation

// MARK: - core.v1.GRPCAction

public extension core.v1 {

	///
	/// GRPCAction specifies an action involving a GRPC service.
	///
	struct GRPCAction: KubernetesResource {
		///
		/// Port number of the gRPC service. Number must be in the range 1 to 65535.
		///
		public var port: Int32
		///
		/// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
		///
		/// If this is not specified, the default behavior is defined by gRPC.
		///
		public var service: String?
		///
		/// Default memberwise initializer
		///
		public init(
			port: Int32,
			service: String? = nil
		) {
			self.port = port
			self.service = service
		}
	}
}

///
/// Codable conformance
///
public extension core.v1.GRPCAction {

	private enum CodingKeys: String, CodingKey {

		case port = "port"
		case service = "service"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.port = try container.decode(Int32.self, forKey: .port)
		self.service = try container.decodeIfPresent(String.self, forKey: .service)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(port, forKey: .port)
		try encodingContainer.encode(service, forKey: .service)
	}
}
