//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// resource.v1alpha3.OpaqueDeviceConfiguration
///

import Foundation

// MARK: - resource.v1alpha3.OpaqueDeviceConfiguration

public extension resource.v1alpha3 {

	///
	/// OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
	///
	struct OpaqueDeviceConfiguration: KubernetesResource {
		///
		/// Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.
		///
		/// An admission policy provided by the driver developer could use this to decide whether it needs to validate them.
		///
		/// Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
		///
		public var driver: String
		///
		/// Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version ("kind" + "apiVersion" for Kubernetes types), with conversion between different versions.
		///
		/// The length of the raw data must be smaller or equal to 10 Ki.
		///
		public var parameters: JSONObject
		///
		/// Default memberwise initializer
		///
		public init(
			driver: String,
			parameters: JSONObject
		) {
			self.driver = driver
			self.parameters = parameters
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.OpaqueDeviceConfiguration {

	private enum CodingKeys: String, CodingKey {

		case driver = "driver"
		case parameters = "parameters"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.driver = try container.decode(String.self, forKey: .driver)
		self.parameters = try container.decode(JSONObject.self, forKey: .parameters)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(driver, forKey: .driver)
		try encodingContainer.encode(parameters, forKey: .parameters)
	}
}
