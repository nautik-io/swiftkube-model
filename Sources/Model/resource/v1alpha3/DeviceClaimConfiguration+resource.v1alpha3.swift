//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// resource.v1alpha3.DeviceClaimConfiguration
///

import Foundation

// MARK: - resource.v1alpha3.DeviceClaimConfiguration

public extension resource.v1alpha3 {

	///
	/// DeviceClaimConfiguration is used for configuration parameters in DeviceClaim.
	///
	struct DeviceClaimConfiguration: KubernetesResource {
		///
		/// Opaque provides driver-specific configuration parameters.
		///
		public var opaque: resource.v1alpha3.OpaqueDeviceConfiguration?
		///
		/// Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.
		///
		public var requests: [String]?
		///
		/// Default memberwise initializer
		///
		public init(
			opaque: resource.v1alpha3.OpaqueDeviceConfiguration? = nil,
			requests: [String]? = nil
		) {
			self.opaque = opaque
			self.requests = requests
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.DeviceClaimConfiguration {

	private enum CodingKeys: String, CodingKey {

		case opaque = "opaque"
		case requests = "requests"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.opaque = try container.decodeIfPresent(resource.v1alpha3.OpaqueDeviceConfiguration.self, forKey: .opaque)
		self.requests = try container.decodeIfPresent([String].self, forKey: .requests)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(opaque, forKey: .opaque)
		try encodingContainer.encode(requests, forKey: .requests)
	}
}
