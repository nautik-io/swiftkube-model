//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// resource.v1alpha3.ResourcePool
///

import Foundation

// MARK: - resource.v1alpha3.ResourcePool

public extension resource.v1alpha3 {

	///
	/// ResourcePool describes the pool that ResourceSlices belong to.
	///
	struct ResourcePool: KubernetesResource {
		///
		/// Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.
		///
		/// Combined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state.
		///
		public var generation: Int64
		///
		/// Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.
		///
		/// It must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable.
		///
		public var name: String
		///
		/// ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.
		///
		/// Consumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.
		///
		public var resourceSliceCount: Int64
		///
		/// Default memberwise initializer
		///
		public init(
			generation: Int64,
			name: String,
			resourceSliceCount: Int64
		) {
			self.generation = generation
			self.name = name
			self.resourceSliceCount = resourceSliceCount
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.ResourcePool {

	private enum CodingKeys: String, CodingKey {

		case generation = "generation"
		case name = "name"
		case resourceSliceCount = "resourceSliceCount"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.generation = try container.decode(Int64.self, forKey: .generation)
		self.name = try container.decode(String.self, forKey: .name)
		self.resourceSliceCount = try container.decode(Int64.self, forKey: .resourceSliceCount)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(generation, forKey: .generation)
		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(resourceSliceCount, forKey: .resourceSliceCount)
	}
}
