//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// resource.v1alpha3.DeviceTaintRuleSpec
///

import Foundation

// MARK: - resource.v1alpha3.DeviceTaintRuleSpec

public extension resource.v1alpha3 {

	///
	/// DeviceTaintRuleSpec specifies the selector and one taint.
	///
	struct DeviceTaintRuleSpec: KubernetesResource {
		///
		/// DeviceSelector defines which device(s) the taint is applied to. All selector criteria must be satified for a device to match. The empty selector matches all devices. Without a selector, no devices are matches.
		///
		public var deviceSelector: resource.v1alpha3.DeviceTaintSelector?
		///
		/// The taint that gets applied to matching devices.
		///
		public var taint: resource.v1alpha3.DeviceTaint
		///
		/// Default memberwise initializer
		///
		public init(
			deviceSelector: resource.v1alpha3.DeviceTaintSelector? = nil,
			taint: resource.v1alpha3.DeviceTaint
		) {
			self.deviceSelector = deviceSelector
			self.taint = taint
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.DeviceTaintRuleSpec {

	private enum CodingKeys: String, CodingKey {

		case deviceSelector = "deviceSelector"
		case taint = "taint"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.deviceSelector = try container.decodeIfPresent(resource.v1alpha3.DeviceTaintSelector.self, forKey: .deviceSelector)
		self.taint = try container.decode(resource.v1alpha3.DeviceTaint.self, forKey: .taint)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(deviceSelector, forKey: .deviceSelector)
		try encodingContainer.encode(taint, forKey: .taint)
	}
}
