//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// resource.v1alpha3.DeviceConstraint
///

import Foundation

// MARK: - resource.v1alpha3.DeviceConstraint

public extension resource.v1alpha3 {

	///
	/// DeviceConstraint must have exactly one field set besides Requests.
	///
	struct DeviceConstraint: KubernetesResource {
		///
		/// MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.
		///
		/// For example, if you specified "dra.example.com/numa" (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.
		///
		/// Must include the domain qualifier.
		///
		public var matchAttribute: String?
		///
		/// Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.
		///
		/// References to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the constraint applies to all subrequests.
		///
		public var requests: [String]?
		///
		/// Default memberwise initializer
		///
		public init(
			matchAttribute: String? = nil,
			requests: [String]? = nil
		) {
			self.matchAttribute = matchAttribute
			self.requests = requests
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.DeviceConstraint {

	private enum CodingKeys: String, CodingKey {

		case matchAttribute = "matchAttribute"
		case requests = "requests"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.matchAttribute = try container.decodeIfPresent(String.self, forKey: .matchAttribute)
		self.requests = try container.decodeIfPresent([String].self, forKey: .requests)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(matchAttribute, forKey: .matchAttribute)
		try encodingContainer.encode(requests, forKey: .requests)
	}
}
