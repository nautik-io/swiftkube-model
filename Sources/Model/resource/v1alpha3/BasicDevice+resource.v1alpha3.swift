//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.2
/// resource.v1alpha3.BasicDevice
///

import Foundation

// MARK: - resource.v1alpha3.BasicDevice

public extension resource.v1alpha3 {

	///
	/// BasicDevice defines one device instance.
	///
	struct BasicDevice: KubernetesResource {
		///
		/// Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
		///
		/// The maximum number of attributes and capacities combined is 32.
		///
		public var attributes: [String: resource.v1alpha3.DeviceAttribute]?
		///
		/// Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
		///
		/// The maximum number of attributes and capacities combined is 32.
		///
		public var capacity: [String: Quantity]?
		///
		/// Default memberwise initializer
		///
		public init(
			attributes: [String: resource.v1alpha3.DeviceAttribute]? = nil,
			capacity: [String: Quantity]? = nil
		) {
			self.attributes = attributes
			self.capacity = capacity
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.BasicDevice {

	private enum CodingKeys: String, CodingKey {

		case attributes = "attributes"
		case capacity = "capacity"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.attributes = try container.decodeIfPresent([String: resource.v1alpha3.DeviceAttribute].self, forKey: .attributes)
		self.capacity = try container.decodeIfPresent([String: Quantity].self, forKey: .capacity)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(attributes, forKey: .attributes)
		try encodingContainer.encode(capacity, forKey: .capacity)
	}
}
