//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.2
/// resource.v1alpha3.DeviceClaim
///

import Foundation

// MARK: - resource.v1alpha3.DeviceClaim

public extension resource.v1alpha3 {

	///
	/// DeviceClaim defines how to request devices with a ResourceClaim.
	///
	struct DeviceClaim: KubernetesResource {
		///
		/// This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
		///
		public var config: [resource.v1alpha3.DeviceClaimConfiguration]?
		///
		/// These constraints must be satisfied by the set of devices that get allocated for the claim.
		///
		public var constraints: [resource.v1alpha3.DeviceConstraint]?
		///
		/// Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
		///
		public var requests: [resource.v1alpha3.DeviceRequest]?
		///
		/// Default memberwise initializer
		///
		public init(
			config: [resource.v1alpha3.DeviceClaimConfiguration]? = nil,
			constraints: [resource.v1alpha3.DeviceConstraint]? = nil,
			requests: [resource.v1alpha3.DeviceRequest]? = nil
		) {
			self.config = config
			self.constraints = constraints
			self.requests = requests
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.DeviceClaim {

	private enum CodingKeys: String, CodingKey {

		case config = "config"
		case constraints = "constraints"
		case requests = "requests"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.config = try container.decodeIfPresent([resource.v1alpha3.DeviceClaimConfiguration].self, forKey: .config)
		self.constraints = try container.decodeIfPresent([resource.v1alpha3.DeviceConstraint].self, forKey: .constraints)
		self.requests = try container.decodeIfPresent([resource.v1alpha3.DeviceRequest].self, forKey: .requests)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(config, forKey: .config)
		try encodingContainer.encode(constraints, forKey: .constraints)
		try encodingContainer.encode(requests, forKey: .requests)
	}
}
