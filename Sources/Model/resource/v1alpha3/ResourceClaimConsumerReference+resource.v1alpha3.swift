//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// resource.v1alpha3.ResourceClaimConsumerReference
///

import Foundation

// MARK: - resource.v1alpha3.ResourceClaimConsumerReference

public extension resource.v1alpha3 {

	///
	/// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
	///
	struct ResourceClaimConsumerReference: KubernetesResource {
		///
		/// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
		///
		public var apiGroup: String?
		///
		/// Name is the name of resource being referenced.
		///
		public var name: String
		///
		/// Resource is the type of resource being referenced, for example "pods".
		///
		public var resource: String
		///
		/// UID identifies exactly one incarnation of the resource.
		///
		public var uid: String
		///
		/// Default memberwise initializer
		///
		public init(
			apiGroup: String? = nil,
			name: String,
			resource: String,
			uid: String
		) {
			self.apiGroup = apiGroup
			self.name = name
			self.resource = resource
			self.uid = uid
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.ResourceClaimConsumerReference {

	private enum CodingKeys: String, CodingKey {

		case apiGroup = "apiGroup"
		case name = "name"
		case resource = "resource"
		case uid = "uid"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.apiGroup = try container.decodeIfPresent(String.self, forKey: .apiGroup)
		self.name = try container.decode(String.self, forKey: .name)
		self.resource = try container.decode(String.self, forKey: .resource)
		self.uid = try container.decode(String.self, forKey: .uid)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(apiGroup, forKey: .apiGroup)
		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(resource, forKey: .resource)
		try encodingContainer.encode(uid, forKey: .uid)
	}
}
