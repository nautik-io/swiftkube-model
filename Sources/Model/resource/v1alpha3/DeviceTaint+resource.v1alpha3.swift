//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// resource.v1alpha3.DeviceTaint
///

import Foundation

// MARK: - resource.v1alpha3.DeviceTaint

public extension resource.v1alpha3 {

	///
	/// The device this taint is attached to has the "effect" on any claim which does not tolerate the taint and, through the claim, to pods using the claim.
	///
	struct DeviceTaint: KubernetesResource {
		///
		/// The effect of the taint on claims that do not tolerate the taint and through such claims on the pods using them. Valid effects are NoSchedule and NoExecute. PreferNoSchedule as used for nodes is not valid here.
		///
		public var effect: String
		///
		/// The taint key to be applied to a device. Must be a label name.
		///
		public var key: String
		///
		/// TimeAdded represents the time at which the taint was added. Added automatically during create or update if not set.
		///
		public var timeAdded: Date?
		///
		/// The taint value corresponding to the taint key. Must be a label value.
		///
		public var value: String?
		///
		/// Default memberwise initializer
		///
		public init(
			effect: String,
			key: String,
			timeAdded: Date? = nil,
			value: String? = nil
		) {
			self.effect = effect
			self.key = key
			self.timeAdded = timeAdded
			self.value = value
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.DeviceTaint {

	private enum CodingKeys: String, CodingKey {

		case effect = "effect"
		case key = "key"
		case timeAdded = "timeAdded"
		case value = "value"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.effect = try container.decode(String.self, forKey: .effect)
		self.key = try container.decode(String.self, forKey: .key)
		self.timeAdded = try container.decodeIfPresent(Date.self, forKey: .timeAdded)
		self.value = try container.decodeIfPresent(String.self, forKey: .value)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(effect, forKey: .effect)
		try encodingContainer.encode(key, forKey: .key)
		try encodingContainer.encode(timeAdded, forKey: .timeAdded)
		try encodingContainer.encode(value, forKey: .value)
	}
}
