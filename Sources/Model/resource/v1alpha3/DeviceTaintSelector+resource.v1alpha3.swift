//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// resource.v1alpha3.DeviceTaintSelector
///

import Foundation

// MARK: - resource.v1alpha3.DeviceTaintSelector

public extension resource.v1alpha3 {

	///
	/// DeviceTaintSelector defines which device(s) a DeviceTaintRule applies to. The empty selector matches all devices. Without a selector, no devices are matched.
	///
	struct DeviceTaintSelector: KubernetesResource {
		///
		/// If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.
		///
		/// Setting also driver and pool may be required to avoid ambiguity, but is not required.
		///
		public var device: String?
		///
		/// If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name.
		///
		public var deviceClassName: String?
		///
		/// If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver.
		///
		public var driver: String?
		///
		/// If pool is set, only devices in that pool are selected.
		///
		/// Also setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name.
		///
		public var pool: String?
		///
		/// Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
		///
		public var selectors: [resource.v1alpha3.DeviceSelector]?
		///
		/// Default memberwise initializer
		///
		public init(
			device: String? = nil,
			deviceClassName: String? = nil,
			driver: String? = nil,
			pool: String? = nil,
			selectors: [resource.v1alpha3.DeviceSelector]? = nil
		) {
			self.device = device
			self.deviceClassName = deviceClassName
			self.driver = driver
			self.pool = pool
			self.selectors = selectors
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha3.DeviceTaintSelector {

	private enum CodingKeys: String, CodingKey {

		case device = "device"
		case deviceClassName = "deviceClassName"
		case driver = "driver"
		case pool = "pool"
		case selectors = "selectors"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.device = try container.decodeIfPresent(String.self, forKey: .device)
		self.deviceClassName = try container.decodeIfPresent(String.self, forKey: .deviceClassName)
		self.driver = try container.decodeIfPresent(String.self, forKey: .driver)
		self.pool = try container.decodeIfPresent(String.self, forKey: .pool)
		self.selectors = try container.decodeIfPresent([resource.v1alpha3.DeviceSelector].self, forKey: .selectors)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(device, forKey: .device)
		try encodingContainer.encode(deviceClassName, forKey: .deviceClassName)
		try encodingContainer.encode(driver, forKey: .driver)
		try encodingContainer.encode(pool, forKey: .pool)
		try encodingContainer.encode(selectors, forKey: .selectors)
	}
}
