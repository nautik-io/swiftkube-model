//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// resource.v1beta2.CounterSet
///

import Foundation

// MARK: - resource.v1beta2.CounterSet

public extension resource.v1beta2 {

	///
	/// CounterSet defines a named set of counters that are available to be used by devices defined in the ResourceSlice.
	///
	/// The counters are not allocatable by themselves, but can be referenced by devices. When a device is allocated, the portion of counters it uses will no longer be available for use by other devices.
	///
	struct CounterSet: KubernetesResource {
		///
		/// Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.
		///
		/// The maximum number of counters in all sets is 32.
		///
		public var counters: [String: resource.v1beta2.Counter]
		///
		/// Name defines the name of the counter set. It must be a DNS label.
		///
		public var name: String
		///
		/// Default memberwise initializer
		///
		public init(
			counters: [String: resource.v1beta2.Counter],
			name: String
		) {
			self.counters = counters
			self.name = name
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1beta2.CounterSet {

	private enum CodingKeys: String, CodingKey {

		case counters = "counters"
		case name = "name"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.counters = try container.decode([String: resource.v1beta2.Counter].self, forKey: .counters)
		self.name = try container.decode(String.self, forKey: .name)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(counters, forKey: .counters)
		try encodingContainer.encode(name, forKey: .name)
	}
}
