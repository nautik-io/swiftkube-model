//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// resource.v1beta2.DeviceCounterConsumption
///

import Foundation

// MARK: - resource.v1beta2.DeviceCounterConsumption

public extension resource.v1beta2 {

	///
	/// DeviceCounterConsumption defines a set of counters that a device will consume from a CounterSet.
	///
	struct DeviceCounterConsumption: KubernetesResource {
		///
		/// CounterSet is the name of the set from which the counters defined will be consumed.
		///
		public var counterSet: String
		///
		/// Counters defines the counters that will be consumed by the device.
		///
		/// The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).
		///
		public var counters: [String: resource.v1beta2.Counter]
		///
		/// Default memberwise initializer
		///
		public init(
			counterSet: String,
			counters: [String: resource.v1beta2.Counter]
		) {
			self.counterSet = counterSet
			self.counters = counters
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1beta2.DeviceCounterConsumption {

	private enum CodingKeys: String, CodingKey {

		case counterSet = "counterSet"
		case counters = "counters"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.counterSet = try container.decode(String.self, forKey: .counterSet)
		self.counters = try container.decode([String: resource.v1beta2.Counter].self, forKey: .counters)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(counterSet, forKey: .counterSet)
		try encodingContainer.encode(counters, forKey: .counters)
	}
}
