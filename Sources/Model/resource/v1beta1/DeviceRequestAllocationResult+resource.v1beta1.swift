//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// resource.v1beta1.DeviceRequestAllocationResult
///

import Foundation

// MARK: - resource.v1beta1.DeviceRequestAllocationResult

public extension resource.v1beta1 {

	///
	/// DeviceRequestAllocationResult contains the allocation result for one request.
	///
	struct DeviceRequestAllocationResult: KubernetesResource {
		///
		/// AdminAccess indicates that this device was allocated for administrative access. See the corresponding request field for a definition of mode.
		///
		/// This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
		///
		public var adminAccess: Bool?
		///
		/// Device references one device instance via its name in the driver's resource pool. It must be a DNS label.
		///
		public var device: String
		///
		/// Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.
		///
		/// Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
		///
		public var driver: String
		///
		/// This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).
		///
		/// Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.
		///
		public var pool: String
		///
		/// Request is the name of the request in the claim which caused this device to be allocated. Multiple devices may have been allocated per request.
		///
		public var request: String
		///
		/// Default memberwise initializer
		///
		public init(
			adminAccess: Bool? = nil,
			device: String,
			driver: String,
			pool: String,
			request: String
		) {
			self.adminAccess = adminAccess
			self.device = device
			self.driver = driver
			self.pool = pool
			self.request = request
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1beta1.DeviceRequestAllocationResult {

	private enum CodingKeys: String, CodingKey {

		case adminAccess = "adminAccess"
		case device = "device"
		case driver = "driver"
		case pool = "pool"
		case request = "request"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.adminAccess = try container.decodeIfPresent(Bool.self, forKey: .adminAccess)
		self.device = try container.decode(String.self, forKey: .device)
		self.driver = try container.decode(String.self, forKey: .driver)
		self.pool = try container.decode(String.self, forKey: .pool)
		self.request = try container.decode(String.self, forKey: .request)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(adminAccess, forKey: .adminAccess)
		try encodingContainer.encode(device, forKey: .device)
		try encodingContainer.encode(driver, forKey: .driver)
		try encodingContainer.encode(pool, forKey: .pool)
		try encodingContainer.encode(request, forKey: .request)
	}
}
