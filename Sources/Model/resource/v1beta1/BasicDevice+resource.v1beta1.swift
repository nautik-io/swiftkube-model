//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// resource.v1beta1.BasicDevice
///

import Foundation

// MARK: - resource.v1beta1.BasicDevice

public extension resource.v1beta1 {

	///
	/// BasicDevice defines one device instance.
	///
	struct BasicDevice: KubernetesResource {
		///
		/// AllNodes indicates that all nodes have access to the device.
		///
		/// Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
		///
		public var allNodes: Bool?
		///
		/// Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
		///
		/// The maximum number of attributes and capacities combined is 32.
		///
		public var attributes: [String: resource.v1beta1.DeviceAttribute]?
		///
		/// Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
		///
		/// The maximum number of attributes and capacities combined is 32.
		///
		public var capacity: [String: resource.v1beta1.DeviceCapacity]?
		///
		/// ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.
		///
		/// There can only be a single entry per counterSet.
		///
		/// The total number of device counter consumption entries must be <= 32. In addition, the total number in the entire ResourceSlice must be <= 1024 (for example, 64 devices with 16 counters each).
		///
		public var consumesCounters: [resource.v1beta1.DeviceCounterConsumption]?
		///
		/// NodeName identifies the node where the device is available.
		///
		/// Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
		///
		public var nodeName: String?
		///
		/// NodeSelector defines the nodes where the device is available.
		///
		/// Must use exactly one term.
		///
		/// Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
		///
		public var nodeSelector: core.v1.NodeSelector?
		///
		/// If specified, these are the driver-defined taints.
		///
		/// The maximum number of taints is 4.
		///
		/// This is an alpha field and requires enabling the DRADeviceTaints feature gate.
		///
		public var taints: [resource.v1beta1.DeviceTaint]?
		///
		/// Default memberwise initializer
		///
		public init(
			allNodes: Bool? = nil,
			attributes: [String: resource.v1beta1.DeviceAttribute]? = nil,
			capacity: [String: resource.v1beta1.DeviceCapacity]? = nil,
			consumesCounters: [resource.v1beta1.DeviceCounterConsumption]? = nil,
			nodeName: String? = nil,
			nodeSelector: core.v1.NodeSelector? = nil,
			taints: [resource.v1beta1.DeviceTaint]? = nil
		) {
			self.allNodes = allNodes
			self.attributes = attributes
			self.capacity = capacity
			self.consumesCounters = consumesCounters
			self.nodeName = nodeName
			self.nodeSelector = nodeSelector
			self.taints = taints
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1beta1.BasicDevice {

	private enum CodingKeys: String, CodingKey {

		case allNodes = "allNodes"
		case attributes = "attributes"
		case capacity = "capacity"
		case consumesCounters = "consumesCounters"
		case nodeName = "nodeName"
		case nodeSelector = "nodeSelector"
		case taints = "taints"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.allNodes = try container.decodeIfPresent(Bool.self, forKey: .allNodes)
		self.attributes = try container.decodeIfPresent([String: resource.v1beta1.DeviceAttribute].self, forKey: .attributes)
		self.capacity = try container.decodeIfPresent([String: resource.v1beta1.DeviceCapacity].self, forKey: .capacity)
		self.consumesCounters = try container.decodeIfPresent([resource.v1beta1.DeviceCounterConsumption].self, forKey: .consumesCounters)
		self.nodeName = try container.decodeIfPresent(String.self, forKey: .nodeName)
		self.nodeSelector = try container.decodeIfPresent(core.v1.NodeSelector.self, forKey: .nodeSelector)
		self.taints = try container.decodeIfPresent([resource.v1beta1.DeviceTaint].self, forKey: .taints)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(allNodes, forKey: .allNodes)
		try encodingContainer.encode(attributes, forKey: .attributes)
		try encodingContainer.encode(capacity, forKey: .capacity)
		try encodingContainer.encode(consumesCounters, forKey: .consumesCounters)
		try encodingContainer.encode(nodeName, forKey: .nodeName)
		try encodingContainer.encode(nodeSelector, forKey: .nodeSelector)
		try encodingContainer.encode(taints, forKey: .taints)
	}
}
