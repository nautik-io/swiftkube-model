//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// resource.v1beta1.DeviceSelector
///

import Foundation

// MARK: - resource.v1beta1.DeviceSelector

public extension resource.v1beta1 {

	///
	/// DeviceSelector must have exactly one field set.
	///
	struct DeviceSelector: KubernetesResource {
		///
		/// CEL contains a CEL expression for selecting a device.
		///
		public var cel: resource.v1beta1.CELDeviceSelector?
		///
		/// Default memberwise initializer
		///
		public init(
			cel: resource.v1beta1.CELDeviceSelector? = nil
		) {
			self.cel = cel
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1beta1.DeviceSelector {

	private enum CodingKeys: String, CodingKey {

		case cel = "cel"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.cel = try container.decodeIfPresent(resource.v1beta1.CELDeviceSelector.self, forKey: .cel)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(cel, forKey: .cel)
	}
}
