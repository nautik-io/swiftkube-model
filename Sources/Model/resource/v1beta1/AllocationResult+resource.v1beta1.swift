//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// resource.v1beta1.AllocationResult
///

import Foundation

// MARK: - resource.v1beta1.AllocationResult

public extension resource.v1beta1 {

	///
	/// AllocationResult contains attributes of an allocated resource.
	///
	struct AllocationResult: KubernetesResource {
		///
		/// Devices is the result of allocating devices.
		///
		public var devices: resource.v1beta1.DeviceAllocationResult?
		///
		/// NodeSelector defines where the allocated resources are available. If unset, they are available everywhere.
		///
		public var nodeSelector: core.v1.NodeSelector?
		///
		/// Default memberwise initializer
		///
		public init(
			devices: resource.v1beta1.DeviceAllocationResult? = nil,
			nodeSelector: core.v1.NodeSelector? = nil
		) {
			self.devices = devices
			self.nodeSelector = nodeSelector
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1beta1.AllocationResult {

	private enum CodingKeys: String, CodingKey {

		case devices = "devices"
		case nodeSelector = "nodeSelector"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.devices = try container.decodeIfPresent(resource.v1beta1.DeviceAllocationResult.self, forKey: .devices)
		self.nodeSelector = try container.decodeIfPresent(core.v1.NodeSelector.self, forKey: .nodeSelector)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(devices, forKey: .devices)
		try encodingContainer.encode(nodeSelector, forKey: .nodeSelector)
	}
}
