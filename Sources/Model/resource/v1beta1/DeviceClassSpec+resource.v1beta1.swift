//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// resource.v1beta1.DeviceClassSpec
///

import Foundation

// MARK: - resource.v1beta1.DeviceClassSpec

public extension resource.v1beta1 {

	///
	/// DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.
	///
	struct DeviceClassSpec: KubernetesResource {
		///
		/// Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.
		///
		/// They are passed to the driver, but are not considered while allocating the claim.
		///
		public var config: [resource.v1beta1.DeviceClassConfiguration]?
		///
		/// Each selector must be satisfied by a device which is claimed via this class.
		///
		public var selectors: [resource.v1beta1.DeviceSelector]?
		///
		/// Default memberwise initializer
		///
		public init(
			config: [resource.v1beta1.DeviceClassConfiguration]? = nil,
			selectors: [resource.v1beta1.DeviceSelector]? = nil
		) {
			self.config = config
			self.selectors = selectors
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1beta1.DeviceClassSpec {

	private enum CodingKeys: String, CodingKey {

		case config = "config"
		case selectors = "selectors"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.config = try container.decodeIfPresent([resource.v1beta1.DeviceClassConfiguration].self, forKey: .config)
		self.selectors = try container.decodeIfPresent([resource.v1beta1.DeviceSelector].self, forKey: .selectors)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(config, forKey: .config)
		try encodingContainer.encode(selectors, forKey: .selectors)
	}
}
