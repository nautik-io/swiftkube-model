//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// resource.v1beta1.DeviceRequest
///

import Foundation

// MARK: - resource.v1beta1.DeviceRequest

public extension resource.v1beta1 {

	///
	/// DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices.
	///
	/// A DeviceClassName is currently required. Clients must check that it is indeed set. It's absence indicates that something changed in a way that is not supported by the client yet, in which case it must refuse to handle the request.
	///
	struct DeviceRequest: KubernetesResource {
		///
		/// AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.
		///
		/// This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.
		///
		public var adminAccess: Bool?
		///
		/// AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:
		///
		/// - ExactCount: This request is for a specific number of devices.
		///   This is the default. The exact number is provided in the
		///   count field.
		///
		/// - All: This request is for all of the matching devices in a pool.
		///   Allocation will fail if some devices are already allocated,
		///   unless adminAccess is requested.
		///
		/// If AlloctionMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.
		///
		/// More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
		///
		public var allocationMode: String?
		///
		/// Count is used only when the count mode is "ExactCount". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
		///
		public var count: Int64?
		///
		/// DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.
		///
		/// A class is required. Which classes are available depends on the cluster.
		///
		/// Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
		///
		public var deviceClassName: String
		///
		/// Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
		///
		/// Must be a DNS label.
		///
		public var name: String
		///
		/// Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.
		///
		public var selectors: [resource.v1beta1.DeviceSelector]?
		///
		/// Default memberwise initializer
		///
		public init(
			adminAccess: Bool? = nil,
			allocationMode: String? = nil,
			count: Int64? = nil,
			deviceClassName: String,
			name: String,
			selectors: [resource.v1beta1.DeviceSelector]? = nil
		) {
			self.adminAccess = adminAccess
			self.allocationMode = allocationMode
			self.count = count
			self.deviceClassName = deviceClassName
			self.name = name
			self.selectors = selectors
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1beta1.DeviceRequest {

	private enum CodingKeys: String, CodingKey {

		case adminAccess = "adminAccess"
		case allocationMode = "allocationMode"
		case count = "count"
		case deviceClassName = "deviceClassName"
		case name = "name"
		case selectors = "selectors"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.adminAccess = try container.decodeIfPresent(Bool.self, forKey: .adminAccess)
		self.allocationMode = try container.decodeIfPresent(String.self, forKey: .allocationMode)
		self.count = try container.decodeIfPresent(Int64.self, forKey: .count)
		self.deviceClassName = try container.decode(String.self, forKey: .deviceClassName)
		self.name = try container.decode(String.self, forKey: .name)
		self.selectors = try container.decodeIfPresent([resource.v1beta1.DeviceSelector].self, forKey: .selectors)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(adminAccess, forKey: .adminAccess)
		try encodingContainer.encode(allocationMode, forKey: .allocationMode)
		try encodingContainer.encode(count, forKey: .count)
		try encodingContainer.encode(deviceClassName, forKey: .deviceClassName)
		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(selectors, forKey: .selectors)
	}
}
