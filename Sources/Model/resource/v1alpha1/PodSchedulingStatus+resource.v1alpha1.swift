//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.26.4
/// resource.v1alpha1.PodSchedulingStatus
///

import Foundation

// MARK: - resource.v1alpha1.PodSchedulingStatus

public extension resource.v1alpha1 {

	///
	/// PodSchedulingStatus describes where resources for the Pod can be allocated.
	///
	struct PodSchedulingStatus: KubernetesResource {
		///
		/// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
		///
		public var resourceClaims: [resource.v1alpha1.ResourceClaimSchedulingStatus]?
		///
		/// Default memberwise initializer
		///
		public init(
			resourceClaims: [resource.v1alpha1.ResourceClaimSchedulingStatus]? = nil
		) {
			self.resourceClaims = resourceClaims
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha1.PodSchedulingStatus {

	private enum CodingKeys: String, CodingKey {

		case resourceClaims = "resourceClaims"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.resourceClaims = try container.decodeIfPresent([resource.v1alpha1.ResourceClaimSchedulingStatus].self, forKey: .resourceClaims)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(resourceClaims, forKey: .resourceClaims)
	}
}
