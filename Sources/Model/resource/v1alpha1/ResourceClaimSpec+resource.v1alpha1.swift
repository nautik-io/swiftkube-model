//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.26.4
/// resource.v1alpha1.ResourceClaimSpec
///

import Foundation

// MARK: - resource.v1alpha1.ResourceClaimSpec

public extension resource.v1alpha1 {

	///
	/// ResourceClaimSpec defines how a resource is to be allocated.
	///
	struct ResourceClaimSpec: KubernetesResource {
		///
		/// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
		///
		public var allocationMode: String?
		///
		/// ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
		///
		/// The object must be in the same namespace as the ResourceClaim.
		///
		public var parametersRef: resource.v1alpha1.ResourceClaimParametersReference?
		///
		/// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
		///
		public var resourceClassName: String
		///
		/// Default memberwise initializer
		///
		public init(
			allocationMode: String? = nil,
			parametersRef: resource.v1alpha1.ResourceClaimParametersReference? = nil,
			resourceClassName: String
		) {
			self.allocationMode = allocationMode
			self.parametersRef = parametersRef
			self.resourceClassName = resourceClassName
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha1.ResourceClaimSpec {

	private enum CodingKeys: String, CodingKey {

		case allocationMode = "allocationMode"
		case parametersRef = "parametersRef"
		case resourceClassName = "resourceClassName"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.allocationMode = try container.decodeIfPresent(String.self, forKey: .allocationMode)
		self.parametersRef = try container.decodeIfPresent(resource.v1alpha1.ResourceClaimParametersReference.self, forKey: .parametersRef)
		self.resourceClassName = try container.decode(String.self, forKey: .resourceClassName)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(allocationMode, forKey: .allocationMode)
		try encodingContainer.encode(parametersRef, forKey: .parametersRef)
		try encodingContainer.encode(resourceClassName, forKey: .resourceClassName)
	}
}
