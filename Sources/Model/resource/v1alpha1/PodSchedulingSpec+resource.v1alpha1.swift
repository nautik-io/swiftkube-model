//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.26.4
/// resource.v1alpha1.PodSchedulingSpec
///

import Foundation

// MARK: - resource.v1alpha1.PodSchedulingSpec

public extension resource.v1alpha1 {

	///
	/// PodSchedulingSpec describes where resources for the Pod are needed.
	///
	struct PodSchedulingSpec: KubernetesResource {
		///
		/// PotentialNodes lists nodes where the Pod might be able to run.
		///
		/// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
		///
		public var potentialNodes: [String]?
		///
		/// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
		///
		public var selectedNode: String?
		///
		/// Default memberwise initializer
		///
		public init(
			potentialNodes: [String]? = nil,
			selectedNode: String? = nil
		) {
			self.potentialNodes = potentialNodes
			self.selectedNode = selectedNode
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha1.PodSchedulingSpec {

	private enum CodingKeys: String, CodingKey {

		case potentialNodes = "potentialNodes"
		case selectedNode = "selectedNode"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.potentialNodes = try container.decodeIfPresent([String].self, forKey: .potentialNodes)
		self.selectedNode = try container.decodeIfPresent(String.self, forKey: .selectedNode)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(potentialNodes, forKey: .potentialNodes)
		try encodingContainer.encode(selectedNode, forKey: .selectedNode)
	}
}
