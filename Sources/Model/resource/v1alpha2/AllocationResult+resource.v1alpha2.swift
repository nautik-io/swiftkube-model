//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.28.3
/// resource.v1alpha2.AllocationResult
///

import Foundation

// MARK: - resource.v1alpha2.AllocationResult

public extension resource.v1alpha2 {

	///
	/// AllocationResult contains attributes of an allocated resource.
	///
	struct AllocationResult: KubernetesResource {
		///
		/// This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
		///
		/// Setting this field is optional. If null, the resource is available everywhere.
		///
		public var availableOnNodes: core.v1.NodeSelector?
		///
		/// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
		///
		/// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
		///
		public var resourceHandles: [resource.v1alpha2.ResourceHandle]?
		///
		/// Shareable determines whether the resource supports more than one consumer at a time.
		///
		public var shareable: Bool?
		///
		/// Default memberwise initializer
		///
		public init(
			availableOnNodes: core.v1.NodeSelector? = nil,
			resourceHandles: [resource.v1alpha2.ResourceHandle]? = nil,
			shareable: Bool? = nil
		) {
			self.availableOnNodes = availableOnNodes
			self.resourceHandles = resourceHandles
			self.shareable = shareable
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha2.AllocationResult {

	private enum CodingKeys: String, CodingKey {

		case availableOnNodes = "availableOnNodes"
		case resourceHandles = "resourceHandles"
		case shareable = "shareable"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.availableOnNodes = try container.decodeIfPresent(core.v1.NodeSelector.self, forKey: .availableOnNodes)
		self.resourceHandles = try container.decodeIfPresent([resource.v1alpha2.ResourceHandle].self, forKey: .resourceHandles)
		self.shareable = try container.decodeIfPresent(Bool.self, forKey: .shareable)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(availableOnNodes, forKey: .availableOnNodes)
		try encodingContainer.encode(resourceHandles, forKey: .resourceHandles)
		try encodingContainer.encode(shareable, forKey: .shareable)
	}
}
