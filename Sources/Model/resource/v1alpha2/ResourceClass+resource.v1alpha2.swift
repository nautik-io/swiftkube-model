//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.28.3
/// resource.v1alpha2.ResourceClass
///

import Foundation

// MARK: - resource.v1alpha2.ResourceClass

public extension resource.v1alpha2 {

	///
	/// ResourceClass is used by administrators to influence how resources are allocated.
	///
	/// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
	///
	struct ResourceClass: KubernetesAPIResource, MetadataHavingResource, ClusterScopedResource,
		ReadableResource, ListableResource, CreatableResource, ReplaceableResource, DeletableResource, CollectionDeletableResource
	{
		///
		/// ListableResource.List associated type
		///
		public typealias List = resource.v1alpha2.ResourceClassList
		///
		/// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
		///
		public let apiVersion: String = "resource.k8s.io/v1alpha2"
		///
		/// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		///
		public let kind: String = "ResourceClass"
		///
		/// Standard object metadata
		///
		public var metadata: meta.v1.ObjectMeta?
		///
		/// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
		///
		/// Resource drivers have a unique name in forward domain order (acme.example.com).
		///
		public var driverName: String
		///
		/// ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
		///
		public var parametersRef: resource.v1alpha2.ResourceClassParametersReference?
		///
		/// Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
		///
		/// Setting this field is optional. If null, all nodes are candidates.
		///
		public var suitableNodes: core.v1.NodeSelector?
		///
		/// Default memberwise initializer
		///
		public init(
			metadata: meta.v1.ObjectMeta? = nil,
			driverName: String,
			parametersRef: resource.v1alpha2.ResourceClassParametersReference? = nil,
			suitableNodes: core.v1.NodeSelector? = nil
		) {
			self.metadata = metadata
			self.driverName = driverName
			self.parametersRef = parametersRef
			self.suitableNodes = suitableNodes
		}
	}
}

///
/// Codable conformance
///
public extension resource.v1alpha2.ResourceClass {

	private enum CodingKeys: String, CodingKey {

		case apiVersion = "apiVersion"
		case kind = "kind"
		case metadata = "metadata"
		case driverName = "driverName"
		case parametersRef = "parametersRef"
		case suitableNodes = "suitableNodes"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.metadata = try container.decodeIfPresent(meta.v1.ObjectMeta.self, forKey: .metadata)
		self.driverName = try container.decode(String.self, forKey: .driverName)
		self.parametersRef = try container.decodeIfPresent(resource.v1alpha2.ResourceClassParametersReference.self, forKey: .parametersRef)
		self.suitableNodes = try container.decodeIfPresent(core.v1.NodeSelector.self, forKey: .suitableNodes)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(apiVersion, forKey: .apiVersion)
		try encodingContainer.encode(kind, forKey: .kind)
		try encodingContainer.encode(metadata, forKey: .metadata)
		try encodingContainer.encode(driverName, forKey: .driverName)
		try encodingContainer.encode(parametersRef, forKey: .parametersRef)
		try encodingContainer.encode(suitableNodes, forKey: .suitableNodes)
	}
}
