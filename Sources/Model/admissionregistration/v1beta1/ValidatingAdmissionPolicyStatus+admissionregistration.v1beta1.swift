//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus
///

import Foundation

// MARK: - admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus

public extension admissionregistration.v1beta1 {

	///
	/// ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.
	///
	struct ValidatingAdmissionPolicyStatus: KubernetesResource {
		///
		/// The conditions represent the latest available observations of a policy's current state.
		///
		public var conditions: [meta.v1.Condition]?
		///
		/// The generation observed by the controller.
		///
		public var observedGeneration: Int64?
		///
		/// The results of type checking for each expression. Presence of this field indicates the completion of the type checking.
		///
		public var typeChecking: admissionregistration.v1beta1.TypeChecking?
		///
		/// Default memberwise initializer
		///
		public init(
			conditions: [meta.v1.Condition]? = nil,
			observedGeneration: Int64? = nil,
			typeChecking: admissionregistration.v1beta1.TypeChecking? = nil
		) {
			self.conditions = conditions
			self.observedGeneration = observedGeneration
			self.typeChecking = typeChecking
		}
	}
}

///
/// Codable conformance
///
public extension admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus {

	private enum CodingKeys: String, CodingKey {

		case conditions = "conditions"
		case observedGeneration = "observedGeneration"
		case typeChecking = "typeChecking"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.conditions = try container.decodeIfPresent([meta.v1.Condition].self, forKey: .conditions)
		self.observedGeneration = try container.decodeIfPresent(Int64.self, forKey: .observedGeneration)
		self.typeChecking = try container.decodeIfPresent(admissionregistration.v1beta1.TypeChecking.self, forKey: .typeChecking)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(conditions, forKey: .conditions)
		try encodingContainer.encode(observedGeneration, forKey: .observedGeneration)
		try encodingContainer.encode(typeChecking, forKey: .typeChecking)
	}
}
