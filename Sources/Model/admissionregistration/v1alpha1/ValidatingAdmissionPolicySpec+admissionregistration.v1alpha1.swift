//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.26.4
/// admissionregistration.v1alpha1.ValidatingAdmissionPolicySpec
///

import Foundation

// MARK: - admissionregistration.v1alpha1.ValidatingAdmissionPolicySpec

public extension admissionregistration.v1alpha1 {

	///
	/// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
	///
	struct ValidatingAdmissionPolicySpec: KubernetesResource {
		///
		/// FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.
		///
		public var failurePolicy: String?
		///
		/// MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
		///
		public var matchConstraints: admissionregistration.v1alpha1.MatchResources?
		///
		/// ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
		///
		public var paramKind: admissionregistration.v1alpha1.ParamKind?
		///
		/// Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.
		///
		public var validations: [admissionregistration.v1alpha1.Validation]
		///
		/// Default memberwise initializer
		///
		public init(
			failurePolicy: String? = nil,
			matchConstraints: admissionregistration.v1alpha1.MatchResources? = nil,
			paramKind: admissionregistration.v1alpha1.ParamKind? = nil,
			validations: [admissionregistration.v1alpha1.Validation]
		) {
			self.failurePolicy = failurePolicy
			self.matchConstraints = matchConstraints
			self.paramKind = paramKind
			self.validations = validations
		}
	}
}

///
/// Codable conformance
///
public extension admissionregistration.v1alpha1.ValidatingAdmissionPolicySpec {

	private enum CodingKeys: String, CodingKey {

		case failurePolicy = "failurePolicy"
		case matchConstraints = "matchConstraints"
		case paramKind = "paramKind"
		case validations = "validations"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.failurePolicy = try container.decodeIfPresent(String.self, forKey: .failurePolicy)
		self.matchConstraints = try container.decodeIfPresent(admissionregistration.v1alpha1.MatchResources.self, forKey: .matchConstraints)
		self.paramKind = try container.decodeIfPresent(admissionregistration.v1alpha1.ParamKind.self, forKey: .paramKind)
		self.validations = try container.decode([admissionregistration.v1alpha1.Validation].self, forKey: .validations)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(failurePolicy, forKey: .failurePolicy)
		try encodingContainer.encode(matchConstraints, forKey: .matchConstraints)
		try encodingContainer.encode(paramKind, forKey: .paramKind)
		try encodingContainer.encode(validations, forKey: .validations)
	}
}
