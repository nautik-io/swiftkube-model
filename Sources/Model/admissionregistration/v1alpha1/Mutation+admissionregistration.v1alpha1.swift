//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// admissionregistration.v1alpha1.Mutation
///

import Foundation

// MARK: - admissionregistration.v1alpha1.Mutation

public extension admissionregistration.v1alpha1 {

	///
	/// Mutation specifies the CEL expression which is used to apply the Mutation.
	///
	struct Mutation: KubernetesResource {
		///
		/// applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.
		///
		public var applyConfiguration: admissionregistration.v1alpha1.ApplyConfiguration?
		///
		/// jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.
		///
		public var jsonPatch: admissionregistration.v1alpha1.JSONPatch?
		///
		/// patchType indicates the patch strategy used. Allowed values are "ApplyConfiguration" and "JSONPatch". Required.
		///
		public var patchType: String
		///
		/// Default memberwise initializer
		///
		public init(
			applyConfiguration: admissionregistration.v1alpha1.ApplyConfiguration? = nil,
			jsonPatch: admissionregistration.v1alpha1.JSONPatch? = nil,
			patchType: String
		) {
			self.applyConfiguration = applyConfiguration
			self.jsonPatch = jsonPatch
			self.patchType = patchType
		}
	}
}

///
/// Codable conformance
///
public extension admissionregistration.v1alpha1.Mutation {

	private enum CodingKeys: String, CodingKey {

		case applyConfiguration = "applyConfiguration"
		case jsonPatch = "jsonPatch"
		case patchType = "patchType"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.applyConfiguration = try container.decodeIfPresent(admissionregistration.v1alpha1.ApplyConfiguration.self, forKey: .applyConfiguration)
		self.jsonPatch = try container.decodeIfPresent(admissionregistration.v1alpha1.JSONPatch.self, forKey: .jsonPatch)
		self.patchType = try container.decode(String.self, forKey: .patchType)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(applyConfiguration, forKey: .applyConfiguration)
		try encodingContainer.encode(jsonPatch, forKey: .jsonPatch)
		try encodingContainer.encode(patchType, forKey: .patchType)
	}
}
