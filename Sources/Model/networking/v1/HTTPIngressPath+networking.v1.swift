//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.28.0
/// networking.v1.HTTPIngressPath
///

import Foundation

// MARK: - networking.v1.HTTPIngressPath

public extension networking.v1 {

	///
	/// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
	///
	struct HTTPIngressPath: KubernetesResource {
		///
		/// backend defines the referenced service endpoint to which the traffic will be forwarded to.
		///
		public var backend: networking.v1.IngressBackend
		///
		/// path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
		///
		public var path: String?
		///
		/// pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
		///   done on a path element by element basis. A path element refers is the
		///   list of labels in the path split by the '/' separator. A request is a
		///   match for path p if every p is an element-wise prefix of p of the
		///   request path. Note that if the last element of the path is a substring
		///   of the last element in request path, it is not a match (e.g. /foo/bar
		///   matches /foo/bar/baz, but does not match /foo/barbaz).
		/// * ImplementationSpecific: Interpretation of the Path matching is up to
		///   the IngressClass. Implementations can treat this as a separate PathType
		///   or treat it identically to Prefix or Exact path types.
		/// Implementations are required to support all path types.
		///
		public var pathType: String
		///
		/// Default memberwise initializer
		///
		public init(
			backend: networking.v1.IngressBackend,
			path: String? = nil,
			pathType: String
		) {
			self.backend = backend
			self.path = path
			self.pathType = pathType
		}
	}
}

///
/// Codable conformance
///
public extension networking.v1.HTTPIngressPath {

	private enum CodingKeys: String, CodingKey {

		case backend = "backend"
		case path = "path"
		case pathType = "pathType"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.backend = try container.decode(networking.v1.IngressBackend.self, forKey: .backend)
		self.path = try container.decodeIfPresent(String.self, forKey: .path)
		self.pathType = try container.decode(String.self, forKey: .pathType)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(backend, forKey: .backend)
		try encodingContainer.encode(path, forKey: .path)
		try encodingContainer.encode(pathType, forKey: .pathType)
	}
}
