//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.25.9
/// networking.v1.IngressSpec
///

import Foundation

// MARK: - networking.v1.IngressSpec

public extension networking.v1 {

	///
	/// IngressSpec describes the Ingress the user wishes to exist.
	///
	struct IngressSpec: KubernetesResource {
		///
		/// DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
		///
		public var defaultBackend: networking.v1.IngressBackend?
		///
		/// IngressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
		///
		public var ingressClassName: String?
		///
		/// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
		///
		public var rules: [networking.v1.IngressRule]?
		///
		/// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
		///
		public var tls: [networking.v1.IngressTLS]?
		///
		/// Default memberwise initializer
		///
		public init(
			defaultBackend: networking.v1.IngressBackend? = nil,
			ingressClassName: String? = nil,
			rules: [networking.v1.IngressRule]? = nil,
			tls: [networking.v1.IngressTLS]? = nil
		) {
			self.defaultBackend = defaultBackend
			self.ingressClassName = ingressClassName
			self.rules = rules
			self.tls = tls
		}
	}
}

///
/// Codable conformance
///
public extension networking.v1.IngressSpec {

	private enum CodingKeys: String, CodingKey {

		case defaultBackend = "defaultBackend"
		case ingressClassName = "ingressClassName"
		case rules = "rules"
		case tls = "tls"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.defaultBackend = try container.decodeIfPresent(networking.v1.IngressBackend.self, forKey: .defaultBackend)
		self.ingressClassName = try container.decodeIfPresent(String.self, forKey: .ingressClassName)
		self.rules = try container.decodeIfPresent([networking.v1.IngressRule].self, forKey: .rules)
		self.tls = try container.decodeIfPresent([networking.v1.IngressTLS].self, forKey: .tls)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(defaultBackend, forKey: .defaultBackend)
		try encodingContainer.encode(ingressClassName, forKey: .ingressClassName)
		try encodingContainer.encode(rules, forKey: .rules)
		try encodingContainer.encode(tls, forKey: .tls)
	}
}
