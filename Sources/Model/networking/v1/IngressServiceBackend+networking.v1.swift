//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.24.8
/// networking.v1.IngressServiceBackend
///

import Foundation

// MARK: - networking.v1.IngressServiceBackend

public extension networking.v1 {

	///
	/// IngressServiceBackend references a Kubernetes Service as a Backend.
	///
	struct IngressServiceBackend: KubernetesResource {
		///
		/// Name is the referenced service. The service must exist in the same namespace as the Ingress object.
		///
		public var name: String
		///
		/// Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
		///
		public var port: networking.v1.ServiceBackendPort?
		///
		/// Default memberwise initializer
		///
		public init(
			name: String,
			port: networking.v1.ServiceBackendPort? = nil
		) {
			self.name = name
			self.port = port
		}
	}
}

///
/// Codable conformance
///
public extension networking.v1.IngressServiceBackend {

	private enum CodingKeys: String, CodingKey {

		case name = "name"
		case port = "port"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.name = try container.decode(String.self, forKey: .name)
		self.port = try container.decodeIfPresent(networking.v1.ServiceBackendPort.self, forKey: .port)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(port, forKey: .port)
	}
}
