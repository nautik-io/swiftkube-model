//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.29.6
/// networking.v1alpha1.ServiceCIDRSpec
///

import Foundation

// MARK: - networking.v1alpha1.ServiceCIDRSpec

public extension networking.v1alpha1 {

	///
	/// ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
	///
	struct ServiceCIDRSpec: KubernetesResource {
		///
		/// CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
		///
		public var cidrs: [String]?
		///
		/// Default memberwise initializer
		///
		public init(
			cidrs: [String]? = nil
		) {
			self.cidrs = cidrs
		}
	}
}

///
/// Codable conformance
///
public extension networking.v1alpha1.ServiceCIDRSpec {

	private enum CodingKeys: String, CodingKey {

		case cidrs = "cidrs"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.cidrs = try container.decodeIfPresent([String].self, forKey: .cidrs)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(cidrs, forKey: .cidrs)
	}
}
