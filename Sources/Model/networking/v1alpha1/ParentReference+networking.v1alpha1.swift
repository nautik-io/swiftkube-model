//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.29.6
/// networking.v1alpha1.ParentReference
///

import Foundation

// MARK: - networking.v1alpha1.ParentReference

public extension networking.v1alpha1 {

	///
	/// ParentReference describes a reference to a parent object.
	///
	struct ParentReference: KubernetesResource {
		///
		/// Group is the group of the object being referenced.
		///
		public var group: String?
		///
		/// Name is the name of the object being referenced.
		///
		public var name: String?
		///
		/// Namespace is the namespace of the object being referenced.
		///
		public var namespace: String?
		///
		/// Resource is the resource of the object being referenced.
		///
		public var resource: String?
		///
		/// Default memberwise initializer
		///
		public init(
			group: String? = nil,
			name: String? = nil,
			namespace: String? = nil,
			resource: String? = nil
		) {
			self.group = group
			self.name = name
			self.namespace = namespace
			self.resource = resource
		}
	}
}

///
/// Codable conformance
///
public extension networking.v1alpha1.ParentReference {

	private enum CodingKeys: String, CodingKey {

		case group = "group"
		case name = "name"
		case namespace = "namespace"
		case resource = "resource"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.group = try container.decodeIfPresent(String.self, forKey: .group)
		self.name = try container.decodeIfPresent(String.self, forKey: .name)
		self.namespace = try container.decodeIfPresent(String.self, forKey: .namespace)
		self.resource = try container.decodeIfPresent(String.self, forKey: .resource)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(group, forKey: .group)
		try encodingContainer.encode(name, forKey: .name)
		try encodingContainer.encode(namespace, forKey: .namespace)
		try encodingContainer.encode(resource, forKey: .resource)
	}
}
