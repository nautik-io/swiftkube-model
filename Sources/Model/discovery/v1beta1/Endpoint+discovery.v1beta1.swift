//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.24.8
/// discovery.v1beta1.Endpoint
///

import Foundation

// MARK: - discovery.v1beta1.Endpoint

public extension discovery.v1beta1 {

	///
	/// Endpoint represents a single logical "backend" implementing a service.
	///
	struct Endpoint: KubernetesResource {
		///
		/// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
		///
		public var addresses: [String]
		///
		/// conditions contains information about the current status of the endpoint.
		///
		public var conditions: discovery.v1beta1.EndpointConditions?
		///
		/// hints contains information associated with how an endpoint should be consumed.
		///
		public var hints: discovery.v1beta1.EndpointHints?
		///
		/// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
		///
		public var hostname: String?
		///
		/// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node. This field can be enabled with the EndpointSliceNodeName feature gate.
		///
		public var nodeName: String?
		///
		/// targetRef is a reference to a Kubernetes object that represents this endpoint.
		///
		public var targetRef: core.v1.ObjectReference?
		///
		/// topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node
		///   where the endpoint is located. This should match the corresponding
		///   node label.
		/// * topology.kubernetes.io/zone: the value indicates the zone where the
		///   endpoint is located. This should match the corresponding node label.
		/// * topology.kubernetes.io/region: the value indicates the region where the
		///   endpoint is located. This should match the corresponding node label.
		/// This field is deprecated and will be removed in future api versions.
		///
		public var topology: [String: String]?
		///
		/// Default memberwise initializer
		///
		public init(
			addresses: [String],
			conditions: discovery.v1beta1.EndpointConditions? = nil,
			hints: discovery.v1beta1.EndpointHints? = nil,
			hostname: String? = nil,
			nodeName: String? = nil,
			targetRef: core.v1.ObjectReference? = nil,
			topology: [String: String]? = nil
		) {
			self.addresses = addresses
			self.conditions = conditions
			self.hints = hints
			self.hostname = hostname
			self.nodeName = nodeName
			self.targetRef = targetRef
			self.topology = topology
		}
	}
}

///
/// Codable conformance
///
public extension discovery.v1beta1.Endpoint {

	private enum CodingKeys: String, CodingKey {

		case addresses = "addresses"
		case conditions = "conditions"
		case hints = "hints"
		case hostname = "hostname"
		case nodeName = "nodeName"
		case targetRef = "targetRef"
		case topology = "topology"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.addresses = try container.decode([String].self, forKey: .addresses)
		self.conditions = try container.decodeIfPresent(discovery.v1beta1.EndpointConditions.self, forKey: .conditions)
		self.hints = try container.decodeIfPresent(discovery.v1beta1.EndpointHints.self, forKey: .hints)
		self.hostname = try container.decodeIfPresent(String.self, forKey: .hostname)
		self.nodeName = try container.decodeIfPresent(String.self, forKey: .nodeName)
		self.targetRef = try container.decodeIfPresent(core.v1.ObjectReference.self, forKey: .targetRef)
		self.topology = try container.decodeIfPresent([String: String].self, forKey: .topology)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(addresses, forKey: .addresses)
		try encodingContainer.encode(conditions, forKey: .conditions)
		try encodingContainer.encode(hints, forKey: .hints)
		try encodingContainer.encode(hostname, forKey: .hostname)
		try encodingContainer.encode(nodeName, forKey: .nodeName)
		try encodingContainer.encode(targetRef, forKey: .targetRef)
		try encodingContainer.encode(topology, forKey: .topology)
	}
}
