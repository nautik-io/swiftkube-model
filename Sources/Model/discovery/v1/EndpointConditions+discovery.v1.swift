//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// discovery.v1.EndpointConditions
///

import Foundation

// MARK: - discovery.v1.EndpointConditions

public extension discovery.v1 {

	///
	/// EndpointConditions represents the current condition of an endpoint.
	///
	struct EndpointConditions: KubernetesResource {
		///
		/// ready indicates that this endpoint is ready to receive traffic, according to whatever system is managing the endpoint. A nil value should be interpreted as "true". In general, an endpoint should be marked ready if it is serving and not terminating, though this can be overridden in some cases, such as when the associated Service has set the publishNotReadyAddresses flag.
		///
		public var ready: Bool?
		///
		/// serving indicates that this endpoint is able to receive traffic, according to whatever system is managing the endpoint. For endpoints backed by pods, the EndpointSlice controller will mark the endpoint as serving if the pod's Ready condition is True. A nil value should be interpreted as "true".
		///
		public var serving: Bool?
		///
		/// terminating indicates that this endpoint is terminating. A nil value should be interpreted as "false".
		///
		public var terminating: Bool?
		///
		/// Default memberwise initializer
		///
		public init(
			ready: Bool? = nil,
			serving: Bool? = nil,
			terminating: Bool? = nil
		) {
			self.ready = ready
			self.serving = serving
			self.terminating = terminating
		}
	}
}

///
/// Codable conformance
///
public extension discovery.v1.EndpointConditions {

	private enum CodingKeys: String, CodingKey {

		case ready = "ready"
		case serving = "serving"
		case terminating = "terminating"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.ready = try container.decodeIfPresent(Bool.self, forKey: .ready)
		self.serving = try container.decodeIfPresent(Bool.self, forKey: .serving)
		self.terminating = try container.decodeIfPresent(Bool.self, forKey: .terminating)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(ready, forKey: .ready)
		try encodingContainer.encode(serving, forKey: .serving)
		try encodingContainer.encode(terminating, forKey: .terminating)
	}
}
