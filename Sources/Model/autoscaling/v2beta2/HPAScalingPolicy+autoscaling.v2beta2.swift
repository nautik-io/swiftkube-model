//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.25.9
/// autoscaling.v2beta2.HPAScalingPolicy
///

import Foundation

// MARK: - autoscaling.v2beta2.HPAScalingPolicy

public extension autoscaling.v2beta2 {

	///
	/// HPAScalingPolicy is a single policy which must hold true for a specified past interval.
	///
	struct HPAScalingPolicy: KubernetesResource {
		///
		/// PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
		///
		public var periodSeconds: Int32
		///
		/// Type is used to specify the scaling policy.
		///
		public var type: String
		///
		/// Value contains the amount of change which is permitted by the policy. It must be greater than zero
		///
		public var value: Int32
		///
		/// Default memberwise initializer
		///
		public init(
			periodSeconds: Int32,
			type: String,
			value: Int32
		) {
			self.periodSeconds = periodSeconds
			self.type = type
			self.value = value
		}
	}
}

///
/// Codable conformance
///
public extension autoscaling.v2beta2.HPAScalingPolicy {

	private enum CodingKeys: String, CodingKey {

		case periodSeconds = "periodSeconds"
		case type = "type"
		case value = "value"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.periodSeconds = try container.decode(Int32.self, forKey: .periodSeconds)
		self.type = try container.decode(String.self, forKey: .type)
		self.value = try container.decode(Int32.self, forKey: .value)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(periodSeconds, forKey: .periodSeconds)
		try encodingContainer.encode(type, forKey: .type)
		try encodingContainer.encode(value, forKey: .value)
	}
}
