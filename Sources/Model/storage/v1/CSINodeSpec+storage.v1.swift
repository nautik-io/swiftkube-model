//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.2
/// storage.v1.CSINodeSpec
///

import Foundation

// MARK: - storage.v1.CSINodeSpec

public extension storage.v1 {

	///
	/// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
	///
	struct CSINodeSpec: KubernetesResource {
		///
		/// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
		///
		public var drivers: [storage.v1.CSINodeDriver]
		///
		/// Default memberwise initializer
		///
		public init(
			drivers: [storage.v1.CSINodeDriver]
		) {
			self.drivers = drivers
		}
	}
}

///
/// Codable conformance
///
public extension storage.v1.CSINodeSpec {

	private enum CodingKeys: String, CodingKey {

		case drivers = "drivers"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.drivers = try container.decode([storage.v1.CSINodeDriver].self, forKey: .drivers)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(drivers, forKey: .drivers)
	}
}
