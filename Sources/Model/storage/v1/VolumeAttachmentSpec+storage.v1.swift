//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.28.0
/// storage.v1.VolumeAttachmentSpec
///

import Foundation

// MARK: - storage.v1.VolumeAttachmentSpec

public extension storage.v1 {

	///
	/// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
	///
	struct VolumeAttachmentSpec: KubernetesResource {
		///
		/// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
		///
		public var attacher: String
		///
		/// nodeName represents the node that the volume should be attached to.
		///
		public var nodeName: String
		///
		/// source represents the volume that should be attached.
		///
		public var source: storage.v1.VolumeAttachmentSource
		///
		/// Default memberwise initializer
		///
		public init(
			attacher: String,
			nodeName: String,
			source: storage.v1.VolumeAttachmentSource
		) {
			self.attacher = attacher
			self.nodeName = nodeName
			self.source = source
		}
	}
}

///
/// Codable conformance
///
public extension storage.v1.VolumeAttachmentSpec {

	private enum CodingKeys: String, CodingKey {

		case attacher = "attacher"
		case nodeName = "nodeName"
		case source = "source"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.attacher = try container.decode(String.self, forKey: .attacher)
		self.nodeName = try container.decode(String.self, forKey: .nodeName)
		self.source = try container.decode(storage.v1.VolumeAttachmentSource.self, forKey: .source)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(attacher, forKey: .attacher)
		try encodingContainer.encode(nodeName, forKey: .nodeName)
		try encodingContainer.encode(source, forKey: .source)
	}
}
