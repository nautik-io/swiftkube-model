//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// storagemigration.v1alpha1.GroupVersionResource
///

import Foundation

// MARK: - storagemigration.v1alpha1.GroupVersionResource

public extension storagemigration.v1alpha1 {

	///
	/// The names of the group, the version, and the resource.
	///
	struct GroupVersionResource: KubernetesResource {
		///
		/// The name of the group.
		///
		public var group: String?
		///
		/// The name of the resource.
		///
		public var resource: String?
		///
		/// The name of the version.
		///
		public var version: String?
		///
		/// Default memberwise initializer
		///
		public init(
			group: String? = nil,
			resource: String? = nil,
			version: String? = nil
		) {
			self.group = group
			self.resource = resource
			self.version = version
		}
	}
}

///
/// Codable conformance
///
public extension storagemigration.v1alpha1.GroupVersionResource {

	private enum CodingKeys: String, CodingKey {

		case group = "group"
		case resource = "resource"
		case version = "version"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.group = try container.decodeIfPresent(String.self, forKey: .group)
		self.resource = try container.decodeIfPresent(String.self, forKey: .resource)
		self.version = try container.decodeIfPresent(String.self, forKey: .version)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(group, forKey: .group)
		try encodingContainer.encode(resource, forKey: .resource)
		try encodingContainer.encode(version, forKey: .version)
	}
}
