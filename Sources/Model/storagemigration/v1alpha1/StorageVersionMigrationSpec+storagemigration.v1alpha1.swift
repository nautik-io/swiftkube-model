//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.32.0
/// storagemigration.v1alpha1.StorageVersionMigrationSpec
///

import Foundation

// MARK: - storagemigration.v1alpha1.StorageVersionMigrationSpec

public extension storagemigration.v1alpha1 {

	///
	/// Spec of the storage version migration.
	///
	struct StorageVersionMigrationSpec: KubernetesResource {
		///
		/// The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
		///
		public var continueToken: String?
		///
		/// The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.
		///
		public var resource: storagemigration.v1alpha1.GroupVersionResource
		///
		/// Default memberwise initializer
		///
		public init(
			continueToken: String? = nil,
			resource: storagemigration.v1alpha1.GroupVersionResource
		) {
			self.continueToken = continueToken
			self.resource = resource
		}
	}
}

///
/// Codable conformance
///
public extension storagemigration.v1alpha1.StorageVersionMigrationSpec {

	private enum CodingKeys: String, CodingKey {

		case continueToken = "continueToken"
		case resource = "resource"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.continueToken = try container.decodeIfPresent(String.self, forKey: .continueToken)
		self.resource = try container.decode(storagemigration.v1alpha1.GroupVersionResource.self, forKey: .resource)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(continueToken, forKey: .continueToken)
		try encodingContainer.encode(resource, forKey: .resource)
	}
}
