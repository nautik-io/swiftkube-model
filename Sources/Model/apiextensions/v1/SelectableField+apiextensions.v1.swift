//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// apiextensions.v1.SelectableField
///

import Foundation

// MARK: - apiextensions.v1.SelectableField

public extension apiextensions.v1 {

	///
	/// SelectableField specifies the JSON path of a field that may be used with field selectors.
	///
	struct SelectableField: KubernetesResource {
		///
		/// jsonPath is a simple JSON path which is evaluated against each custom resource to produce a field selector value. Only JSON paths without the array notation are allowed. Must point to a field of type string, boolean or integer. Types with enum values and strings with formats are allowed. If jsonPath refers to absent field in a resource, the jsonPath evaluates to an empty string. Must not point to metdata fields. Required.
		///
		public var jsonPath: String
		///
		/// Default memberwise initializer
		///
		public init(
			jsonPath: String
		) {
			self.jsonPath = jsonPath
		}
	}
}

///
/// Codable conformance
///
public extension apiextensions.v1.SelectableField {

	private enum CodingKeys: String, CodingKey {

		case jsonPath = "jsonPath"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.jsonPath = try container.decode(String.self, forKey: .jsonPath)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(jsonPath, forKey: .jsonPath)
	}
}
