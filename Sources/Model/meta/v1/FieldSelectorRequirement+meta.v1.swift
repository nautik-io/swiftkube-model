//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// meta.v1.FieldSelectorRequirement
///

import Foundation

// MARK: - meta.v1.FieldSelectorRequirement

public extension meta.v1 {

	///
	/// FieldSelectorRequirement is a selector that contains values, a key, and an operator that relates the key and values.
	///
	struct FieldSelectorRequirement: KubernetesResource {
		///
		/// key is the field selector key that the requirement applies to.
		///
		public var key: String
		///
		/// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. The list of operators may grow in the future.
		///
		public var `operator`: String
		///
		/// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
		///
		public var values: [String]?
		///
		/// Default memberwise initializer
		///
		public init(
			key: String,
			`operator`: String,
			values: [String]? = nil
		) {
			self.key = key
			self.`operator` = `operator`
			self.values = values
		}
	}
}

///
/// Codable conformance
///
public extension meta.v1.FieldSelectorRequirement {

	private enum CodingKeys: String, CodingKey {

		case key = "key"
		case `operator` = "operator"
		case values = "values"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.key = try container.decode(String.self, forKey: .key)
		self.`operator` = try container.decode(String.self, forKey: .`operator`)
		self.values = try container.decodeIfPresent([String].self, forKey: .values)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(key, forKey: .key)
		try encodingContainer.encode(`operator`, forKey: .`operator`)
		try encodingContainer.encode(values, forKey: .values)
	}
}
