//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.24.8
/// policy.v1beta1.SupplementalGroupsStrategyOptions
///

import Foundation

// MARK: - policy.v1beta1.SupplementalGroupsStrategyOptions

public extension policy.v1beta1 {

	///
	/// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
	///
	struct SupplementalGroupsStrategyOptions: KubernetesResource {
		///
		/// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
		///
		public var ranges: [policy.v1beta1.IDRange]?
		///
		/// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
		///
		public var rule: String?
		///
		/// Default memberwise initializer
		///
		public init(
			ranges: [policy.v1beta1.IDRange]? = nil,
			rule: String? = nil
		) {
			self.ranges = ranges
			self.rule = rule
		}
	}
}

///
/// Codable conformance
///
public extension policy.v1beta1.SupplementalGroupsStrategyOptions {

	private enum CodingKeys: String, CodingKey {

		case ranges = "ranges"
		case rule = "rule"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.ranges = try container.decodeIfPresent([policy.v1beta1.IDRange].self, forKey: .ranges)
		self.rule = try container.decodeIfPresent(String.self, forKey: .rule)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(ranges, forKey: .ranges)
		try encodingContainer.encode(rule, forKey: .rule)
	}
}
