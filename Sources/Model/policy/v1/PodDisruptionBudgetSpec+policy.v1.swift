//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.33.3
/// policy.v1.PodDisruptionBudgetSpec
///

import Foundation

// MARK: - policy.v1.PodDisruptionBudgetSpec

public extension policy.v1 {

	///
	/// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
	///
	struct PodDisruptionBudgetSpec: KubernetesResource {
		///
		/// An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
		///
		public var maxUnavailable: IntOrString?
		///
		/// An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
		///
		public var minAvailable: IntOrString?
		///
		/// Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.
		///
		public var selector: meta.v1.LabelSelector?
		///
		/// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type="Ready",status="True".
		///
		/// Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.
		///
		/// IfHealthyBudget policy means that running pods (status.phase="Running"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.
		///
		/// AlwaysAllow policy means that all running pods (status.phase="Running"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.
		///
		/// Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.
		///
		public var unhealthyPodEvictionPolicy: String?
		///
		/// Default memberwise initializer
		///
		public init(
			maxUnavailable: IntOrString? = nil,
			minAvailable: IntOrString? = nil,
			selector: meta.v1.LabelSelector? = nil,
			unhealthyPodEvictionPolicy: String? = nil
		) {
			self.maxUnavailable = maxUnavailable
			self.minAvailable = minAvailable
			self.selector = selector
			self.unhealthyPodEvictionPolicy = unhealthyPodEvictionPolicy
		}
	}
}

///
/// Codable conformance
///
public extension policy.v1.PodDisruptionBudgetSpec {

	private enum CodingKeys: String, CodingKey {

		case maxUnavailable = "maxUnavailable"
		case minAvailable = "minAvailable"
		case selector = "selector"
		case unhealthyPodEvictionPolicy = "unhealthyPodEvictionPolicy"
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.maxUnavailable = try container.decodeIfPresent(IntOrString.self, forKey: .maxUnavailable)
		self.minAvailable = try container.decodeIfPresent(IntOrString.self, forKey: .minAvailable)
		self.selector = try container.decodeIfPresent(meta.v1.LabelSelector.self, forKey: .selector)
		self.unhealthyPodEvictionPolicy = try container.decodeIfPresent(String.self, forKey: .unhealthyPodEvictionPolicy)
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)

		try encodingContainer.encode(maxUnavailable, forKey: .maxUnavailable)
		try encodingContainer.encode(minAvailable, forKey: .minAvailable)
		try encodingContainer.encode(selector, forKey: .selector)
		try encodingContainer.encode(unhealthyPodEvictionPolicy, forKey: .unhealthyPodEvictionPolicy)
	}
}
